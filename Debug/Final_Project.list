
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006874  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08006a14  08006a14  00007a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e8  080077e8  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  080077e8  080077e8  000087e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f0  080077f0  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f0  080077f0  000087f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077f4  080077f4  000087f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080077f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  2000005c  08007854  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08007854  00009730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001105e  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c56  00000000  00000000  0001a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001cd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c74  00000000  00000000  0001dd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019252  00000000  00000000  0001e9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015daa  00000000  00000000  00037c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d331  00000000  00000000  0004d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ead01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c8  00000000  00000000  000ead44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ef50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069fc 	.word	0x080069fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080069fc 	.word	0x080069fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000594:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059c:	2201      	movs	r2, #1
 800059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ae:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b0:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ba:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	480e      	ldr	r0, [pc, #56]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d0:	f000 ff52 	bl	8001478 <HAL_ADC_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 fa9f 	bl	8000b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f0:	f001 f9ae 	bl	8001950 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005fa:	f000 fa8f 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000078 	.word	0x20000078
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a33      	ldr	r2, [pc, #204]	@ (8000700 <HAL_ADC_MspInit+0xec>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d160      	bne.n	80006f8 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a31      	ldr	r2, [pc, #196]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4821      	ldr	r0, [pc, #132]	@ (8000708 <HAL_ADC_MspInit+0xf4>)
 8000682:	f002 f8d1 	bl	8002828 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000686:	4b21      	ldr	r3, [pc, #132]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <HAL_ADC_MspInit+0xfc>)
 800068a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000692:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069e:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006cc:	480f      	ldr	r0, [pc, #60]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006ce:	f001 fd0b 	bl	80020e8 <HAL_DMA_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80006d8:	f000 fa20 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2012      	movs	r0, #18
 80006ee:	f001 fcc4 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006f2:	2012      	movs	r0, #18
 80006f4:	f001 fcdd 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	@ 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40012000 	.word	0x40012000
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000
 800070c:	200000c0 	.word	0x200000c0
 8000710:	40026410 	.word	0x40026410

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <MX_DMA_Init+0x3c>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2038      	movs	r0, #56	@ 0x38
 800073c:	f001 fc9d 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000740:	2038      	movs	r0, #56	@ 0x38
 8000742:	f001 fcb6 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_GPIO_Init+0x80>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <MX_GPIO_Init+0x80>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_GPIO_Init+0x80>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_GPIO_Init+0x80>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a11      	ldr	r2, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x80>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_GPIO_Init+0x80>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4808      	ldr	r0, [pc, #32]	@ (80007d8 <MX_GPIO_Init+0x84>)
 80007b8:	f002 f836 	bl	8002828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	2007      	movs	r0, #7
 80007c2:	f001 fc5a 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007c6:	2007      	movs	r0, #7
 80007c8:	f001 fc73 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020000 	.word	0x40020000

080007dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_I2C1_Init+0x50>)
 80007e2:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_I2C1_Init+0x54>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_I2C1_Init+0x50>)
 80007e8:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <MX_I2C1_Init+0x58>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_I2C1_Init+0x50>)
 80007fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_I2C1_Init+0x50>)
 800081a:	f002 f9a1 	bl	8002b60 <HAL_I2C_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000824:	f000 f97a 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000120 	.word	0x20000120
 8000830:	40005400 	.word	0x40005400
 8000834:	000186a0 	.word	0x000186a0

08000838 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <HAL_I2C_MspInit+0xa4>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d13b      	bne.n	80008d2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <HAL_I2C_MspInit+0xa8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a1f      	ldr	r2, [pc, #124]	@ (80008e0 <HAL_I2C_MspInit+0xa8>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <HAL_I2C_MspInit+0xa8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000876:	23c0      	movs	r3, #192	@ 0xc0
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087a:	2312      	movs	r3, #18
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000886:	2304      	movs	r3, #4
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <HAL_I2C_MspInit+0xac>)
 8000892:	f001 ffc9 	bl	8002828 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <HAL_I2C_MspInit+0xa8>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	4a10      	ldr	r2, [pc, #64]	@ (80008e0 <HAL_I2C_MspInit+0xa8>)
 80008a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <HAL_I2C_MspInit+0xa8>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	201f      	movs	r0, #31
 80008b8:	f001 fbdf 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008bc:	201f      	movs	r0, #31
 80008be:	f001 fbf8 	bl	80020b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2020      	movs	r0, #32
 80008c8:	f001 fbd7 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008cc:	2020      	movs	r0, #32
 80008ce:	f001 fbf0 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	@ 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400

080008e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ec:	f3bf 8f4f 	dsb	sy
}
 80008f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <__NVIC_SystemReset+0x24>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008fa:	4904      	ldr	r1, [pc, #16]	@ (800090c <__NVIC_SystemReset+0x24>)
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <__NVIC_SystemReset+0x28>)
 80008fe:	4313      	orrs	r3, r2
 8000900:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000902:	f3bf 8f4f 	dsb	sy
}
 8000906:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <__NVIC_SystemReset+0x20>
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	05fa0004 	.word	0x05fa0004

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  HAL_Init();
 8000918:	f000 fd18 	bl	800134c <HAL_Init>
  SystemClock_Config();
 800091c:	f000 f886 	bl	8000a2c <SystemClock_Config>
  MX_GPIO_Init();
 8000920:	f7ff ff18 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 8000924:	f7ff fef6 	bl	8000714 <MX_DMA_Init>
  MX_ADC1_Init();
 8000928:	f7ff fe22 	bl	8000570 <MX_ADC1_Init>
  MX_TIM1_Init();
 800092c:	f000 fc04 	bl	8001138 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000930:	f7ff ff54 	bl	80007dc <MX_I2C1_Init>

  HAL_ADC_Start_DMA(&hadc1, &adc_value, 1); // Inicia o ADC no modo DMA
 8000934:	2201      	movs	r2, #1
 8000936:	4912      	ldr	r1, [pc, #72]	@ (8000980 <main+0x6c>)
 8000938:	4812      	ldr	r0, [pc, #72]	@ (8000984 <main+0x70>)
 800093a:	f000 fef1 	bl	8001720 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Inicia o PWM no canal 1 do TIM1
 800093e:	2100      	movs	r1, #0
 8000940:	4811      	ldr	r0, [pc, #68]	@ (8000988 <main+0x74>)
 8000942:	f004 ff37 	bl	80057b4 <HAL_TIM_PWM_Start>

  ssd1306_Init(); // Inicializa o display OLED
 8000946:	f000 f929 	bl	8000b9c <ssd1306_Init>
  Update_Display(); // Atualiza a tela do display
 800094a:	f000 f821 	bl	8000990 <Update_Display>

  while (1)
  {
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adc_value * 1000 / ADC_MAX_VALUE);
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <main+0x6c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000956:	fb03 f202 	mul.w	r2, r3, r2
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <main+0x74>)
 800095c:	6819      	ldr	r1, [r3, #0]
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <main+0x78>)
 8000960:	fba3 0302 	umull	r0, r3, r3, r2
 8000964:	1ad2      	subs	r2, r2, r3
 8000966:	0852      	lsrs	r2, r2, #1
 8000968:	4413      	add	r3, r2
 800096a:	0adb      	lsrs	r3, r3, #11
 800096c:	634b      	str	r3, [r1, #52]	@ 0x34
    Update_Display();
 800096e:	f000 f80f 	bl	8000990 <Update_Display>
    HAL_Delay(500);
 8000972:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000976:	f000 fd5b 	bl	8001430 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adc_value * 1000 / ADC_MAX_VALUE);
 800097a:	bf00      	nop
 800097c:	e7e7      	b.n	800094e <main+0x3a>
 800097e:	bf00      	nop
 8000980:	20000174 	.word	0x20000174
 8000984:	20000078 	.word	0x20000078
 8000988:	2000059c 	.word	0x2000059c
 800098c:	00100101 	.word	0x00100101

08000990 <Update_Display>:

/**
  * @brief Atualiza o display OLED com informações do ADC e PWM.
  */
void Update_Display(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black); // Limpa a tela
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f96a 	bl	8000c70 <ssd1306_Fill>

    if (display_mode == 0)
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <Update_Display+0x80>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d112      	bne.n	80009ca <Update_Display+0x3a>
    {
        snprintf(display_buffer, sizeof(display_buffer), "ADC: %lu", adc_value);
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <Update_Display+0x84>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <Update_Display+0x88>)
 80009aa:	2114      	movs	r1, #20
 80009ac:	481b      	ldr	r0, [pc, #108]	@ (8000a1c <Update_Display+0x8c>)
 80009ae:	f005 fb71 	bl	8006094 <sniprintf>
        ssd1306_SetCursor(10, 10);
 80009b2:	210a      	movs	r1, #10
 80009b4:	200a      	movs	r0, #10
 80009b6:	f000 faa7 	bl	8000f08 <ssd1306_SetCursor>
        ssd1306_WriteString(display_buffer, Font_11x18, White);
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <Update_Display+0x90>)
 80009bc:	2201      	movs	r2, #1
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009c2:	4816      	ldr	r0, [pc, #88]	@ (8000a1c <Update_Display+0x8c>)
 80009c4:	f000 fa7a 	bl	8000ebc <ssd1306_WriteString>
 80009c8:	e01c      	b.n	8000a04 <Update_Display+0x74>
    }
    else
    {
        snprintf(display_buffer, sizeof(display_buffer), "PWM: %lu", adc_value * 1000 / ADC_MAX_VALUE);
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <Update_Display+0x84>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009d2:	fb03 f202 	mul.w	r2, r3, r2
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <Update_Display+0x94>)
 80009d8:	fba3 1302 	umull	r1, r3, r3, r2
 80009dc:	1ad2      	subs	r2, r2, r3
 80009de:	0852      	lsrs	r2, r2, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	0adb      	lsrs	r3, r3, #11
 80009e4:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <Update_Display+0x98>)
 80009e6:	2114      	movs	r1, #20
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <Update_Display+0x8c>)
 80009ea:	f005 fb53 	bl	8006094 <sniprintf>
        ssd1306_SetCursor(10, 10);
 80009ee:	210a      	movs	r1, #10
 80009f0:	200a      	movs	r0, #10
 80009f2:	f000 fa89 	bl	8000f08 <ssd1306_SetCursor>
        ssd1306_WriteString(display_buffer, Font_11x18, White);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <Update_Display+0x90>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	9200      	str	r2, [sp, #0]
 80009fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009fe:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <Update_Display+0x8c>)
 8000a00:	f000 fa5c 	bl	8000ebc <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8000a04:	f000 f94c 	bl	8000ca0 <ssd1306_UpdateScreen>
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000178 	.word	0x20000178
 8000a14:	20000174 	.word	0x20000174
 8000a18:	08006a14 	.word	0x08006a14
 8000a1c:	2000017c 	.word	0x2000017c
 8000a20:	08007788 	.word	0x08007788
 8000a24:	00100101 	.word	0x00100101
 8000a28:	08006a20 	.word	0x08006a20

08000a2c <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	@ 0x50
 8000a30:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	@ 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 fb5e 	bl	80060fc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b22      	ldr	r3, [pc, #136]	@ (8000ae0 <SystemClock_Config+0xb4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <SystemClock_Config+0xb4>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <SystemClock_Config+0xb4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <SystemClock_Config+0xb8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae4 <SystemClock_Config+0xb8>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <SystemClock_Config+0xb8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0320 	add.w	r3, r7, #32
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 f9f5 	bl	8004e8c <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x80>
    {
        Error_Handler();
 8000aa8:	f000 f838 	bl	8000b1c <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 fc58 	bl	800537c <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xaa>
    {
        Error_Handler();
 8000ad2:	f000 f823 	bl	8000b1c <Error_Handler>
    }
}
 8000ad6:	bf00      	nop
 8000ad8:	3750      	adds	r7, #80	@ 0x50
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40007000 	.word	0x40007000

08000ae8 <HAL_GPIO_EXTI_Callback>:

/**
  * @brief Callback da interrupção do botão (PA1 - EXTI).
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1)
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d109      	bne.n	8000b0c <HAL_GPIO_EXTI_Callback+0x24>
    {
        display_mode = !display_mode; // Alterna entre ADC e PWM
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x30>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b0a:	701a      	strb	r2, [r3, #0]
    }
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	20000178 	.word	0x20000178

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  __disable_irq();
  NVIC_SystemReset(); // Reseta o microcontrolador em caso de erro grave
 8000b24:	f7ff fee0 	bl	80008e8 <__NVIC_SystemReset>

08000b28 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af04      	add	r7, sp, #16
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2301      	movs	r3, #1
 8000b52:	2200      	movs	r2, #0
 8000b54:	213c      	movs	r1, #60	@ 0x3c
 8000b56:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <ssd1306_WriteCommand+0x2c>)
 8000b58:	f002 f95c 	bl	8002e14 <HAL_I2C_Mem_Write>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000120 	.word	0x20000120

08000b68 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af04      	add	r7, sp, #16
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7a:	9202      	str	r2, [sp, #8]
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2301      	movs	r3, #1
 8000b84:	2240      	movs	r2, #64	@ 0x40
 8000b86:	213c      	movs	r1, #60	@ 0x3c
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <ssd1306_WriteData+0x30>)
 8000b8a:	f002 f943 	bl	8002e14 <HAL_I2C_Mem_Write>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000120 	.word	0x20000120

08000b9c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ba0:	f7ff ffc2 	bl	8000b28 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ba4:	2064      	movs	r0, #100	@ 0x64
 8000ba6:	f000 fc43 	bl	8001430 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f9d8 	bl	8000f60 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f7ff ffc1 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff ffbe 	bl	8000b38 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bbc:	20b0      	movs	r0, #176	@ 0xb0
 8000bbe:	f7ff ffbb 	bl	8000b38 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000bc2:	20c8      	movs	r0, #200	@ 0xc8
 8000bc4:	f7ff ffb8 	bl	8000b38 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff ffb5 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000bce:	2010      	movs	r0, #16
 8000bd0:	f7ff ffb2 	bl	8000b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000bd4:	2040      	movs	r0, #64	@ 0x40
 8000bd6:	f7ff ffaf 	bl	8000b38 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000bda:	20ff      	movs	r0, #255	@ 0xff
 8000bdc:	f000 f9ac 	bl	8000f38 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000be0:	20a1      	movs	r0, #161	@ 0xa1
 8000be2:	f7ff ffa9 	bl	8000b38 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000be6:	20a6      	movs	r0, #166	@ 0xa6
 8000be8:	f7ff ffa6 	bl	8000b38 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bec:	20a8      	movs	r0, #168	@ 0xa8
 8000bee:	f7ff ffa3 	bl	8000b38 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bf2:	203f      	movs	r0, #63	@ 0x3f
 8000bf4:	f7ff ffa0 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bf8:	20a4      	movs	r0, #164	@ 0xa4
 8000bfa:	f7ff ff9d 	bl	8000b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bfe:	20d3      	movs	r0, #211	@ 0xd3
 8000c00:	f7ff ff9a 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ff97 	bl	8000b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c0a:	20d5      	movs	r0, #213	@ 0xd5
 8000c0c:	f7ff ff94 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c10:	20f0      	movs	r0, #240	@ 0xf0
 8000c12:	f7ff ff91 	bl	8000b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c16:	20d9      	movs	r0, #217	@ 0xd9
 8000c18:	f7ff ff8e 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c1c:	2022      	movs	r0, #34	@ 0x22
 8000c1e:	f7ff ff8b 	bl	8000b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c22:	20da      	movs	r0, #218	@ 0xda
 8000c24:	f7ff ff88 	bl	8000b38 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f7ff ff85 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c2e:	20db      	movs	r0, #219	@ 0xdb
 8000c30:	f7ff ff82 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c34:	2020      	movs	r0, #32
 8000c36:	f7ff ff7f 	bl	8000b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c3a:	208d      	movs	r0, #141	@ 0x8d
 8000c3c:	f7ff ff7c 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c40:	2014      	movs	r0, #20
 8000c42:	f7ff ff79 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 f98a 	bl	8000f60 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f80f 	bl	8000c70 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c52:	f000 f825 	bl	8000ca0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c56:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <ssd1306_Init+0xd0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <ssd1306_Init+0xd0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c62:	4b02      	ldr	r3, [pc, #8]	@ (8000c6c <ssd1306_Init+0xd0>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	711a      	strb	r2, [r3, #4]
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000590 	.word	0x20000590

08000c70 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <ssd1306_Fill+0x14>
 8000c80:	2300      	movs	r3, #0
 8000c82:	e000      	b.n	8000c86 <ssd1306_Fill+0x16>
 8000c84:	23ff      	movs	r3, #255	@ 0xff
 8000c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <ssd1306_Fill+0x2c>)
 8000c8e:	f005 fa35 	bl	80060fc <memset>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000190 	.word	0x20000190

08000ca0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	e016      	b.n	8000cda <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	3b50      	subs	r3, #80	@ 0x50
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff40 	bl	8000b38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff3d 	bl	8000b38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000cbe:	2010      	movs	r0, #16
 8000cc0:	f7ff ff3a 	bl	8000b38 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	01db      	lsls	r3, r3, #7
 8000cc8:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <ssd1306_UpdateScreen+0x4c>)
 8000cca:	4413      	add	r3, r2
 8000ccc:	2180      	movs	r1, #128	@ 0x80
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff4a 	bl	8000b68 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b07      	cmp	r3, #7
 8000cde:	d9e5      	bls.n	8000cac <ssd1306_UpdateScreen+0xc>
    }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000190 	.word	0x20000190

08000cf0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71bb      	strb	r3, [r7, #6]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db3d      	blt.n	8000d86 <ssd1306_DrawPixel+0x96>
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d0e:	d83a      	bhi.n	8000d86 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d10:	797b      	ldrb	r3, [r7, #5]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d11a      	bne.n	8000d4c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	b2d8      	uxtb	r0, r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	01db      	lsls	r3, r3, #7
 8000d22:	4413      	add	r3, r2
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <ssd1306_DrawPixel+0xa4>)
 8000d26:	5cd3      	ldrb	r3, [r2, r3]
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b259      	sxtb	r1, r3
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	01db      	lsls	r3, r3, #7
 8000d42:	4413      	add	r3, r2
 8000d44:	b2c9      	uxtb	r1, r1
 8000d46:	4a13      	ldr	r2, [pc, #76]	@ (8000d94 <ssd1306_DrawPixel+0xa4>)
 8000d48:	54d1      	strb	r1, [r2, r3]
 8000d4a:	e01d      	b.n	8000d88 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b2d8      	uxtb	r0, r3
 8000d54:	4603      	mov	r3, r0
 8000d56:	01db      	lsls	r3, r3, #7
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <ssd1306_DrawPixel+0xa4>)
 8000d5c:	5cd3      	ldrb	r3, [r2, r3]
 8000d5e:	b25a      	sxtb	r2, r3
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	4013      	ands	r3, r2
 8000d74:	b259      	sxtb	r1, r3
 8000d76:	79fa      	ldrb	r2, [r7, #7]
 8000d78:	4603      	mov	r3, r0
 8000d7a:	01db      	lsls	r3, r3, #7
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2c9      	uxtb	r1, r1
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <ssd1306_DrawPixel+0xa4>)
 8000d82:	54d1      	strb	r1, [r2, r3]
 8000d84:	e000      	b.n	8000d88 <ssd1306_DrawPixel+0x98>
        return;
 8000d86:	bf00      	nop
    }
}
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000190 	.word	0x20000190

08000d98 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b089      	sub	sp, #36	@ 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	4638      	mov	r0, r7
 8000da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000da6:	4623      	mov	r3, r4
 8000da8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b1f      	cmp	r3, #31
 8000dae:	d902      	bls.n	8000db6 <ssd1306_WriteChar+0x1e>
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2b7e      	cmp	r3, #126	@ 0x7e
 8000db4:	d901      	bls.n	8000dba <ssd1306_WriteChar+0x22>
        return 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e079      	b.n	8000eae <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <ssd1306_WriteChar+0x34>
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	3b20      	subs	r3, #32
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	e000      	b.n	8000dce <ssd1306_WriteChar+0x36>
 8000dcc:	783b      	ldrb	r3, [r7, #0]
 8000dce:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000dd0:	4b39      	ldr	r3, [pc, #228]	@ (8000eb8 <ssd1306_WriteChar+0x120>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
 8000dd8:	4413      	add	r3, r2
 8000dda:	2b80      	cmp	r3, #128	@ 0x80
 8000ddc:	dc06      	bgt.n	8000dec <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000dde:	4b36      	ldr	r3, [pc, #216]	@ (8000eb8 <ssd1306_WriteChar+0x120>)
 8000de0:	885b      	ldrh	r3, [r3, #2]
 8000de2:	461a      	mov	r2, r3
 8000de4:	787b      	ldrb	r3, [r7, #1]
 8000de6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000de8:	2b40      	cmp	r3, #64	@ 0x40
 8000dea:	dd01      	ble.n	8000df0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e05e      	b.n	8000eae <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	e04d      	b.n	8000e92 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	3b20      	subs	r3, #32
 8000dfc:	7879      	ldrb	r1, [r7, #1]
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	4619      	mov	r1, r3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	440b      	add	r3, r1
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	e036      	b.n	8000e84 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d013      	beq.n	8000e4e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e26:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <ssd1306_WriteChar+0x120>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b2d8      	uxtb	r0, r3
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <ssd1306_WriteChar+0x120>)
 8000e36:	885b      	ldrh	r3, [r3, #2]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff ff52 	bl	8000cf0 <ssd1306_DrawPixel>
 8000e4c:	e017      	b.n	8000e7e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <ssd1306_WriteChar+0x120>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4413      	add	r3, r2
 8000e5a:	b2d8      	uxtb	r0, r3
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <ssd1306_WriteChar+0x120>)
 8000e5e:	885b      	ldrh	r3, [r3, #2]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	b2d9      	uxtb	r1, r3
 8000e6a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf0c      	ite	eq
 8000e72:	2301      	moveq	r3, #1
 8000e74:	2300      	movne	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f7ff ff39 	bl	8000cf0 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	3301      	adds	r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d3c4      	bcc.n	8000e16 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	787b      	ldrb	r3, [r7, #1]
 8000e94:	461a      	mov	r2, r3
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d3ac      	bcc.n	8000df6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <ssd1306_WriteChar+0x120>)
 8000e9e:	881a      	ldrh	r2, [r3, #0]
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <ssd1306_WriteChar+0x120>)
 8000eaa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000590 	.word	0x20000590

08000ebc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000eca:	e013      	b.n	8000ef4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	7818      	ldrb	r0, [r3, #0]
 8000ed0:	7e3b      	ldrb	r3, [r7, #24]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed8:	f7ff ff5e 	bl	8000d98 <ssd1306_WriteChar>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d002      	beq.n	8000eee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	e008      	b.n	8000f00 <ssd1306_WriteString+0x44>
        }
        str++;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1e7      	bne.n	8000ecc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	781b      	ldrb	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <ssd1306_SetCursor+0x2c>)
 8000f1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <ssd1306_SetCursor+0x2c>)
 8000f26:	805a      	strh	r2, [r3, #2]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	20000590 	.word	0x20000590

08000f38 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f42:	2381      	movs	r3, #129	@ 0x81
 8000f44:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fdf5 	bl	8000b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fdf1 	bl	8000b38 <ssd1306_WriteCommand>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f70:	23af      	movs	r3, #175	@ 0xaf
 8000f72:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <ssd1306_SetDisplayOn+0x38>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	715a      	strb	r2, [r3, #5]
 8000f7a:	e004      	b.n	8000f86 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f7c:	23ae      	movs	r3, #174	@ 0xae
 8000f7e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <ssd1306_SetDisplayOn+0x38>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fdd5 	bl	8000b38 <ssd1306_WriteCommand>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000590 	.word	0x20000590

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a08      	ldr	r2, [pc, #32]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <UsageFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 f9d5 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800104e:	2002      	movs	r0, #2
 8001050:	f001 fd6e 	bl	8002b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800105c:	4802      	ldr	r0, [pc, #8]	@ (8001068 <ADC_IRQHandler+0x10>)
 800105e:	f000 fa4e 	bl	80014fe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000078 	.word	0x20000078

0800106c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <I2C1_EV_IRQHandler+0x10>)
 8001072:	f001 ffc9 	bl	8003008 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000120 	.word	0x20000120

08001080 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <I2C1_ER_IRQHandler+0x10>)
 8001086:	f002 f912 	bl	80032ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000120 	.word	0x20000120

08001094 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <DMA2_Stream0_IRQHandler+0x10>)
 800109a:	f001 f94d 	bl	8002338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000c0 	.word	0x200000c0

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f005 f818 	bl	800610c <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20020000 	.word	0x20020000
 8001108:	00000400 	.word	0x00000400
 800110c:	20000598 	.word	0x20000598
 8001110:	20000730 	.word	0x20000730

08001114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b092      	sub	sp, #72	@ 0x48
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2220      	movs	r2, #32
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f004 ffca 	bl	80060fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001168:	4b33      	ldr	r3, [pc, #204]	@ (8001238 <MX_TIM1_Init+0x100>)
 800116a:	4a34      	ldr	r2, [pc, #208]	@ (800123c <MX_TIM1_Init+0x104>)
 800116c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800116e:	4b32      	ldr	r3, [pc, #200]	@ (8001238 <MX_TIM1_Init+0x100>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b30      	ldr	r3, [pc, #192]	@ (8001238 <MX_TIM1_Init+0x100>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800117a:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <MX_TIM1_Init+0x100>)
 800117c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001180:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <MX_TIM1_Init+0x100>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001188:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <MX_TIM1_Init+0x100>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <MX_TIM1_Init+0x100>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001194:	4828      	ldr	r0, [pc, #160]	@ (8001238 <MX_TIM1_Init+0x100>)
 8001196:	f004 fabd 	bl	8005714 <HAL_TIM_PWM_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80011a0:	f7ff fcbc 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011b0:	4619      	mov	r1, r3
 80011b2:	4821      	ldr	r0, [pc, #132]	@ (8001238 <MX_TIM1_Init+0x100>)
 80011b4:	f004 feae 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80011be:	f7ff fcad 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c2:	2360      	movs	r3, #96	@ 0x60
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ce:	2300      	movs	r3, #0
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	4814      	ldr	r0, [pc, #80]	@ (8001238 <MX_TIM1_Init+0x100>)
 80011e8:	f004 fb94 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80011f2:	f7ff fc93 	bl	8000b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800120a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800120e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4619      	mov	r1, r3
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <MX_TIM1_Init+0x100>)
 800121a:	f004 fee9 	bl	8005ff0 <HAL_TIMEx_ConfigBreakDeadTime>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001224:	f7ff fc7a 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001228:	4803      	ldr	r0, [pc, #12]	@ (8001238 <MX_TIM1_Init+0x100>)
 800122a:	f000 f82b 	bl	8001284 <HAL_TIM_MspPostInit>

}
 800122e:	bf00      	nop
 8001230:	3748      	adds	r7, #72	@ 0x48
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000059c 	.word	0x2000059c
 800123c:	40010000 	.word	0x40010000

08001240 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <HAL_TIM_PWM_MspInit+0x3c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10d      	bne.n	800126e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_TIM_PWM_MspInit+0x40>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	4a09      	ldr	r2, [pc, #36]	@ (8001280 <HAL_TIM_PWM_MspInit+0x40>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6453      	str	r3, [r2, #68]	@ 0x44
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <HAL_TIM_PWM_MspInit+0x40>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40010000 	.word	0x40010000
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d11e      	bne.n	80012e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a10      	ldr	r2, [pc, #64]	@ (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <HAL_TIM_MspPostInit+0x70>)
 80012e0:	f001 faa2 	bl	8002828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012fc:	f7ff ff0a 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	@ (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	@ (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f004 fef7 	bl	8006118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff faf3 	bl	8000914 <main>
  bx  lr    
 800132e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800133c:	080077f8 	.word	0x080077f8
  ldr r2, =_sbss
 8001340:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001344:	20000730 	.word	0x20000730

08001348 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <DMA1_Stream0_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <HAL_Init+0x40>)
 8001356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_Init+0x40>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	@ (800138c <HAL_Init+0x40>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 fe75 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	200f      	movs	r0, #15
 800137c:	f000 f808 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fe0c 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_InitTick+0x54>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_InitTick+0x58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fe8d 	bl	80020ce <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 fe55 	bl	800207a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <HAL_InitTick+0x5c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008
 8001414:	200005e4 	.word	0x200005e4

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200005e4 	.word	0x200005e4

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008

08001478 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e033      	b.n	80014f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff f8bc 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d118      	bne.n	80014e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014be:	f023 0302 	bic.w	r3, r3, #2
 80014c2:	f043 0202 	orr.w	r2, r3, #2
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fb72 	bl	8001bb4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e6:	e001      	b.n	80014ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d049      	beq.n	80015c8 <HAL_ADC_IRQHandler+0xca>
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d046      	beq.n	80015c8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d12b      	bne.n	80015b8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001564:	2b00      	cmp	r3, #0
 8001566:	d127      	bne.n	80015b8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001580:	2b00      	cmp	r3, #0
 8001582:	d119      	bne.n	80015b8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0220 	bic.w	r2, r2, #32
 8001592:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f9a1 	bl	8001900 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f06f 0212 	mvn.w	r2, #18
 80015c6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d057      	beq.n	800168e <HAL_ADC_IRQHandler+0x190>
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d054      	beq.n	800168e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d139      	bne.n	800167e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001610:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001622:	2b00      	cmp	r3, #0
 8001624:	d12b      	bne.n	800167e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	d124      	bne.n	800167e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11d      	bne.n	800167e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d119      	bne.n	800167e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001658:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d105      	bne.n	800167e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fc16 	bl	8001eb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f06f 020c 	mvn.w	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800169c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d017      	beq.n	80016d4 <HAL_ADC_IRQHandler+0x1d6>
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d014      	beq.n	80016d4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10d      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f92f 	bl	8001928 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f06f 0201 	mvn.w	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016e2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d015      	beq.n	8001716 <HAL_ADC_IRQHandler+0x218>
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d012      	beq.n	8001716 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f4:	f043 0202 	orr.w	r2, r3, #2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0220 	mvn.w	r2, #32
 8001704:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f918 	bl	800193c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0220 	mvn.w	r2, #32
 8001714:	601a      	str	r2, [r3, #0]
  }
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_ADC_Start_DMA+0x1e>
 800173a:	2302      	movs	r3, #2
 800173c:	e0ce      	b.n	80018dc <HAL_ADC_Start_DMA+0x1bc>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d018      	beq.n	8001786 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001764:	4b5f      	ldr	r3, [pc, #380]	@ (80018e4 <HAL_ADC_Start_DMA+0x1c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5f      	ldr	r2, [pc, #380]	@ (80018e8 <HAL_ADC_Start_DMA+0x1c8>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0c9a      	lsrs	r2, r3, #18
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001778:	e002      	b.n	8001780 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	3b01      	subs	r3, #1
 800177e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001794:	d107      	bne.n	80017a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017a4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	f040 8086 	bne.w	80018c2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017f4:	d106      	bne.n	8001804 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f023 0206 	bic.w	r2, r3, #6
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	645a      	str	r2, [r3, #68]	@ 0x44
 8001802:	e002      	b.n	800180a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001812:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <HAL_ADC_Start_DMA+0x1cc>)
 8001814:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	4a35      	ldr	r2, [pc, #212]	@ (80018f0 <HAL_ADC_Start_DMA+0x1d0>)
 800181c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001822:	4a34      	ldr	r2, [pc, #208]	@ (80018f4 <HAL_ADC_Start_DMA+0x1d4>)
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182a:	4a33      	ldr	r2, [pc, #204]	@ (80018f8 <HAL_ADC_Start_DMA+0x1d8>)
 800182c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001836:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001846:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001856:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	334c      	adds	r3, #76	@ 0x4c
 8001862:	4619      	mov	r1, r3
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f000 fcec 	bl	8002244 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d129      	bne.n	80018da <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	e020      	b.n	80018da <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a17      	ldr	r2, [pc, #92]	@ (80018fc <HAL_ADC_Start_DMA+0x1dc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d11b      	bne.n	80018da <HAL_ADC_Start_DMA+0x1ba>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d114      	bne.n	80018da <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e00b      	b.n	80018da <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f043 0210 	orr.w	r2, r3, #16
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f043 0201 	orr.w	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	40012300 	.word	0x40012300
 80018f0:	08001dad 	.word	0x08001dad
 80018f4:	08001e67 	.word	0x08001e67
 80018f8:	08001e83 	.word	0x08001e83
 80018fc:	40012000 	.word	0x40012000

08001900 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_ADC_ConfigChannel+0x1c>
 8001968:	2302      	movs	r3, #2
 800196a:	e113      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x244>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b09      	cmp	r3, #9
 800197a:	d925      	bls.n	80019c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68d9      	ldr	r1, [r3, #12]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	3b1e      	subs	r3, #30
 8001992:	2207      	movs	r2, #7
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43da      	mvns	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	400a      	ands	r2, r1
 80019a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68d9      	ldr	r1, [r3, #12]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	4603      	mov	r3, r0
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4403      	add	r3, r0
 80019ba:	3b1e      	subs	r3, #30
 80019bc:	409a      	lsls	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	e022      	b.n	8001a0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6919      	ldr	r1, [r3, #16]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	2207      	movs	r2, #7
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	400a      	ands	r2, r1
 80019ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6919      	ldr	r1, [r3, #16]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4403      	add	r3, r0
 8001a04:	409a      	lsls	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d824      	bhi.n	8001a60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	3b05      	subs	r3, #5
 8001a28:	221f      	movs	r2, #31
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	400a      	ands	r2, r1
 8001a36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b05      	subs	r3, #5
 8001a52:	fa00 f203 	lsl.w	r2, r0, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a5e:	e04c      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b0c      	cmp	r3, #12
 8001a66:	d824      	bhi.n	8001ab2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	3b23      	subs	r3, #35	@ 0x23
 8001a7a:	221f      	movs	r2, #31
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43da      	mvns	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	400a      	ands	r2, r1
 8001a88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b23      	subs	r3, #35	@ 0x23
 8001aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ab0:	e023      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b41      	subs	r3, #65	@ 0x41
 8001ac4:	221f      	movs	r2, #31
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	3b41      	subs	r3, #65	@ 0x41
 8001aee:	fa00 f203 	lsl.w	r2, r0, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afa:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <HAL_ADC_ConfigChannel+0x250>)
 8001afc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a28      	ldr	r2, [pc, #160]	@ (8001ba4 <HAL_ADC_ConfigChannel+0x254>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10f      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d8>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b12      	cmp	r3, #18
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba4 <HAL_ADC_ConfigChannel+0x254>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d12b      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x23a>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x258>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d003      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x1f4>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b11      	cmp	r3, #17
 8001b42:	d122      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x258>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d111      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_ADC_ConfigChannel+0x25c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x260>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	0c9a      	lsrs	r2, r3, #18
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40012300 	.word	0x40012300
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	10000012 	.word	0x10000012
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	431bde83 	.word	0x431bde83

08001bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bbc:	4b79      	ldr	r3, [pc, #484]	@ (8001da4 <ADC_Init+0x1f0>)
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	021a      	lsls	r2, r3, #8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6899      	ldr	r1, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c46:	4a58      	ldr	r2, [pc, #352]	@ (8001da8 <ADC_Init+0x1f4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d022      	beq.n	8001c92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6899      	ldr	r1, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	e00f      	b.n	8001cb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0202 	bic.w	r2, r2, #2
 8001cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6899      	ldr	r1, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7e1b      	ldrb	r3, [r3, #24]
 8001ccc:	005a      	lsls	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01b      	beq.n	8001d18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	035a      	lsls	r2, r3, #13
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e007      	b.n	8001d28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	051a      	lsls	r2, r3, #20
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d6a:	025a      	lsls	r2, r3, #9
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6899      	ldr	r1, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	029a      	lsls	r2, r3, #10
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40012300 	.word	0x40012300
 8001da8:	0f000001 	.word	0x0f000001

08001dac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d13c      	bne.n	8001e40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d12b      	bne.n	8001e38 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d127      	bne.n	8001e38 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d119      	bne.n	8001e38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0220 	bic.w	r2, r2, #32
 8001e12:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff fd61 	bl	8001900 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e3e:	e00e      	b.n	8001e5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff fd75 	bl	800193c <HAL_ADC_ErrorCallback>
}
 8001e52:	e004      	b.n	8001e5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e72:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff fd4d 	bl	8001914 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e8e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f043 0204 	orr.w	r2, r3, #4
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff fd4a 	bl	800193c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <__NVIC_SetPriorityGrouping>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	@ (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	@ (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	@ 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff8e 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff29 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff3e 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ff8e 	bl	8001fb8 <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff5d 	bl	8001f64 <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff31 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffa2 	bl	8002020 <SysTick_Config>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff f990 	bl	8001418 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e099      	b.n	8002238 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002124:	e00f      	b.n	8002146 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002126:	f7ff f977 	bl	8001418 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b05      	cmp	r3, #5
 8002132:	d908      	bls.n	8002146 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2203      	movs	r2, #3
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e078      	b.n	8002238 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e8      	bne.n	8002126 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <HAL_DMA_Init+0x158>)
 8002160:	4013      	ands	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002172:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	2b04      	cmp	r3, #4
 800219e:	d107      	bne.n	80021b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a8:	4313      	orrs	r3, r2
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f023 0307 	bic.w	r3, r3, #7
 80021c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d117      	bne.n	800220a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00e      	beq.n	800220a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fa9f 	bl	8002730 <DMA_CheckFifoParam>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2240      	movs	r2, #64	@ 0x40
 80021fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002206:	2301      	movs	r3, #1
 8002208:	e016      	b.n	8002238 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fa56 	bl	80026c4 <DMA_CalcBaseAndBitshift>
 8002218:	4603      	mov	r3, r0
 800221a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002220:	223f      	movs	r2, #63	@ 0x3f
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	f010803f 	.word	0xf010803f

08002244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_DMA_Start_IT+0x26>
 8002266:	2302      	movs	r3, #2
 8002268:	e040      	b.n	80022ec <HAL_DMA_Start_IT+0xa8>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d12f      	bne.n	80022de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f9e8 	bl	8002668 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229c:	223f      	movs	r2, #63	@ 0x3f
 800229e:	409a      	lsls	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0216 	orr.w	r2, r2, #22
 80022b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0208 	orr.w	r2, r2, #8
 80022ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e005      	b.n	80022ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d004      	beq.n	8002312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2280      	movs	r2, #128	@ 0x80
 800230c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00c      	b.n	800232c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2205      	movs	r2, #5
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002344:	4b8e      	ldr	r3, [pc, #568]	@ (8002580 <HAL_DMA_IRQHandler+0x248>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a8e      	ldr	r2, [pc, #568]	@ (8002584 <HAL_DMA_IRQHandler+0x24c>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a9b      	lsrs	r3, r3, #10
 8002350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	2208      	movs	r2, #8
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01a      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0204 	bic.w	r2, r2, #4
 800238a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	2208      	movs	r2, #8
 8002392:	409a      	lsls	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	2201      	movs	r2, #1
 80023c8:	409a      	lsls	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d2:	f043 0202 	orr.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	2204      	movs	r2, #4
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d012      	beq.n	8002410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	2204      	movs	r2, #4
 80023fe:	409a      	lsls	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	f043 0204 	orr.w	r2, r3, #4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	2210      	movs	r2, #16
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d043      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03c      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	2210      	movs	r2, #16
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d018      	beq.n	800247a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d024      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	4798      	blx	r3
 8002466:	e01f      	b.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
 8002478:	e016      	b.n	80024a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0208 	bic.w	r2, r2, #8
 8002496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	2220      	movs	r2, #32
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 808f 	beq.w	80025d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8087 	beq.w	80025d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	2220      	movs	r2, #32
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d136      	bne.n	8002550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0216 	bic.w	r2, r2, #22
 80024f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_DMA_IRQHandler+0x1da>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	223f      	movs	r2, #63	@ 0x3f
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002542:	2b00      	cmp	r3, #0
 8002544:	d07e      	beq.n	8002644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
        }
        return;
 800254e:	e079      	b.n	8002644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01d      	beq.n	800259a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002570:	2b00      	cmp	r3, #0
 8002572:	d031      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
 800257c:	e02c      	b.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000
 8002584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d023      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e01e      	b.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10f      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0210 	bic.w	r2, r2, #16
 80025b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d032      	beq.n	8002646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d022      	beq.n	8002632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2205      	movs	r2, #5
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	d307      	bcc.n	8002620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f2      	bne.n	8002604 <HAL_DMA_IRQHandler+0x2cc>
 800261e:	e000      	b.n	8002622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
 8002642:	e000      	b.n	8002646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002644:	bf00      	nop
    }
  }
}
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800265a:	b2db      	uxtb	r3, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b40      	cmp	r3, #64	@ 0x40
 8002694:	d108      	bne.n	80026a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026a6:	e007      	b.n	80026b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3b10      	subs	r3, #16
 80026d4:	4a14      	ldr	r2, [pc, #80]	@ (8002728 <DMA_CalcBaseAndBitshift+0x64>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026de:	4a13      	ldr	r2, [pc, #76]	@ (800272c <DMA_CalcBaseAndBitshift+0x68>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d909      	bls.n	8002706 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	1d1a      	adds	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	@ 0x58
 8002704:	e007      	b.n	8002716 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	aaaaaaab 	.word	0xaaaaaaab
 800272c:	080077ac 	.word	0x080077ac

08002730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11f      	bne.n	800278a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d856      	bhi.n	80027fe <DMA_CheckFifoParam+0xce>
 8002750:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <DMA_CheckFifoParam+0x28>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002769 	.word	0x08002769
 800275c:	0800277b 	.word	0x0800277b
 8002760:	08002769 	.word	0x08002769
 8002764:	080027ff 	.word	0x080027ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d046      	beq.n	8002802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e043      	b.n	8002802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002782:	d140      	bne.n	8002806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e03d      	b.n	8002806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002792:	d121      	bne.n	80027d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d837      	bhi.n	800280a <DMA_CheckFifoParam+0xda>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <DMA_CheckFifoParam+0x70>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027b7 	.word	0x080027b7
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	080027c9 	.word	0x080027c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      break;
 80027b4:	e030      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d025      	beq.n	800280e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c6:	e022      	b.n	800280e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d0:	d11f      	bne.n	8002812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027d6:	e01c      	b.n	8002812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d903      	bls.n	80027e6 <DMA_CheckFifoParam+0xb6>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d003      	beq.n	80027ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027e4:	e018      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ea:	e015      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e00b      	b.n	8002816 <DMA_CheckFifoParam+0xe6>
      break;
 80027fe:	bf00      	nop
 8002800:	e00a      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e008      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e006      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e004      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;   
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
    }
  } 
  
  return status; 
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e159      	b.n	8002af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	f040 8148 	bne.w	8002af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d005      	beq.n	800287a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002876:	2b02      	cmp	r3, #2
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d017      	beq.n	8002918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d123      	bne.n	800296c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a2 	beq.w	8002af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b57      	ldr	r3, [pc, #348]	@ (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	4a56      	ldr	r2, [pc, #344]	@ (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029be:	4b54      	ldr	r3, [pc, #336]	@ (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ca:	4a52      	ldr	r2, [pc, #328]	@ (8002b14 <HAL_GPIO_Init+0x2ec>)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a49      	ldr	r2, [pc, #292]	@ (8002b18 <HAL_GPIO_Init+0x2f0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x202>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	@ (8002b1c <HAL_GPIO_Init+0x2f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x1fe>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a47      	ldr	r2, [pc, #284]	@ (8002b20 <HAL_GPIO_Init+0x2f8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a46      	ldr	r2, [pc, #280]	@ (8002b24 <HAL_GPIO_Init+0x2fc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x1f6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a45      	ldr	r2, [pc, #276]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x1f2>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	@ (8002b14 <HAL_GPIO_Init+0x2ec>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b38      	ldr	r3, [pc, #224]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a24      	ldr	r2, [pc, #144]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9e:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac8:	4b18      	ldr	r3, [pc, #96]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aec:	4a0f      	ldr	r2, [pc, #60]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f aea2 	bls.w	8002844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b46:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd ffca 	bl	8000ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e12b      	b.n	8002dca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fe56 	bl	8000838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	@ 0x24
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bc4:	f002 fd92 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8002bc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a81      	ldr	r2, [pc, #516]	@ (8002dd4 <HAL_I2C_Init+0x274>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d807      	bhi.n	8002be4 <HAL_I2C_Init+0x84>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a80      	ldr	r2, [pc, #512]	@ (8002dd8 <HAL_I2C_Init+0x278>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	bf94      	ite	ls
 8002bdc:	2301      	movls	r3, #1
 8002bde:	2300      	movhi	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e006      	b.n	8002bf2 <HAL_I2C_Init+0x92>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a7d      	ldr	r2, [pc, #500]	@ (8002ddc <HAL_I2C_Init+0x27c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bf94      	ite	ls
 8002bec:	2301      	movls	r3, #1
 8002bee:	2300      	movhi	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0e7      	b.n	8002dca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a78      	ldr	r2, [pc, #480]	@ (8002de0 <HAL_I2C_Init+0x280>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	0c9b      	lsrs	r3, r3, #18
 8002c04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd4 <HAL_I2C_Init+0x274>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d802      	bhi.n	8002c34 <HAL_I2C_Init+0xd4>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3301      	adds	r3, #1
 8002c32:	e009      	b.n	8002c48 <HAL_I2C_Init+0xe8>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	4a69      	ldr	r2, [pc, #420]	@ (8002de4 <HAL_I2C_Init+0x284>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	3301      	adds	r3, #1
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	495c      	ldr	r1, [pc, #368]	@ (8002dd4 <HAL_I2C_Init+0x274>)
 8002c64:	428b      	cmp	r3, r1
 8002c66:	d819      	bhi.n	8002c9c <HAL_I2C_Init+0x13c>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e59      	subs	r1, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c76:	1c59      	adds	r1, r3, #1
 8002c78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_I2C_Init+0x138>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e59      	subs	r1, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c96:	e051      	b.n	8002d3c <HAL_I2C_Init+0x1dc>
 8002c98:	2304      	movs	r3, #4
 8002c9a:	e04f      	b.n	8002d3c <HAL_I2C_Init+0x1dc>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d111      	bne.n	8002cc8 <HAL_I2C_Init+0x168>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e58      	subs	r0, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e012      	b.n	8002cee <HAL_I2C_Init+0x18e>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1e58      	subs	r0, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	0099      	lsls	r1, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Init+0x196>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e022      	b.n	8002d3c <HAL_I2C_Init+0x1dc>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10e      	bne.n	8002d1c <HAL_I2C_Init+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1e58      	subs	r0, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	440b      	add	r3, r1
 8002d0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d1a:	e00f      	b.n	8002d3c <HAL_I2C_Init+0x1dc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e58      	subs	r0, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	0099      	lsls	r1, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6809      	ldr	r1, [r1, #0]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6911      	ldr	r1, [r2, #16]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68d2      	ldr	r2, [r2, #12]
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	000186a0 	.word	0x000186a0
 8002dd8:	001e847f 	.word	0x001e847f
 8002ddc:	003d08ff 	.word	0x003d08ff
 8002de0:	431bde83 	.word	0x431bde83
 8002de4:	10624dd3 	.word	0x10624dd3

08002de8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfa:	2b80      	cmp	r3, #128	@ 0x80
 8002dfc:	d103      	bne.n	8002e06 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  }
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e2e:	f7fe faf3 	bl	8001418 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	f040 80d9 	bne.w	8002ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2319      	movs	r3, #25
 8002e48:	2201      	movs	r2, #1
 8002e4a:	496d      	ldr	r1, [pc, #436]	@ (8003000 <HAL_I2C_Mem_Write+0x1ec>)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f001 fdf7 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0cc      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Mem_Write+0x56>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0c5      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2221      	movs	r2, #33	@ 0x21
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a4d      	ldr	r2, [pc, #308]	@ (8003004 <HAL_I2C_Mem_Write+0x1f0>)
 8002ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed2:	88f8      	ldrh	r0, [r7, #6]
 8002ed4:	893a      	ldrh	r2, [r7, #8]
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f001 fc6e 	bl	80047c4 <I2C_RequestMemoryWrite>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d052      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e081      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f001 febc 	bl	8004c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d107      	bne.n	8002f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06b      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d11b      	bne.n	8002f94 <HAL_I2C_Mem_Write+0x180>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d017      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1aa      	bne.n	8002ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f001 feaf 	bl	8004d04 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d107      	bne.n	8002fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e016      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	00100002 	.word	0x00100002
 8003004:	ffff0000 	.word	0xffff0000

08003008 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003028:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003030:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b10      	cmp	r3, #16
 8003036:	d003      	beq.n	8003040 <HAL_I2C_EV_IRQHandler+0x38>
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b40      	cmp	r3, #64	@ 0x40
 800303c:	f040 80b1 	bne.w	80031a2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <HAL_I2C_EV_IRQHandler+0x6e>
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003060:	d003      	beq.n	800306a <HAL_I2C_EV_IRQHandler+0x62>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003068:	d101      	bne.n	800306e <HAL_I2C_EV_IRQHandler+0x66>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_I2C_EV_IRQHandler+0x68>
 800306e:	2300      	movs	r3, #0
 8003070:	2b01      	cmp	r3, #1
 8003072:	f000 8114 	beq.w	800329e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_I2C_EV_IRQHandler+0x90>
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f001 fee3 	bl	8004e56 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fd7a 	bl	8003b8a <I2C_Master_SB>
 8003096:	e083      	b.n	80031a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_I2C_EV_IRQHandler+0xac>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fdf2 	bl	8003c96 <I2C_Master_ADD10>
 80030b2:	e075      	b.n	80031a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_I2C_EV_IRQHandler+0xc8>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fe0e 	bl	8003cea <I2C_Master_ADDR>
 80030ce:	e067      	b.n	80031a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d036      	beq.n	8003148 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e8:	f000 80db 	beq.w	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <HAL_I2C_EV_IRQHandler+0x10a>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_I2C_EV_IRQHandler+0x10a>
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9d6 	bl	80034bc <I2C_MasterTransmit_TXE>
 8003110:	e046      	b.n	80031a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80c2 	beq.w	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80bc 	beq.w	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800312a:	7bbb      	ldrb	r3, [r7, #14]
 800312c:	2b21      	cmp	r3, #33	@ 0x21
 800312e:	d103      	bne.n	8003138 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fa5f 	bl	80035f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003136:	e0b4      	b.n	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b40      	cmp	r3, #64	@ 0x40
 800313c:	f040 80b1 	bne.w	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 facd 	bl	80036e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003146:	e0ac      	b.n	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003156:	f000 80a4 	beq.w	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x178>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x178>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fb49 	bl	8003810 <I2C_MasterReceive_RXNE>
 800317e:	e00f      	b.n	80031a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 808b 	beq.w	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8085 	beq.w	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fc01 	bl	80039a0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319e:	e080      	b.n	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
 80031a0:	e07f      	b.n	80032a2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e007      	b.n	80031c4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d011      	beq.n	80031f2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00c      	beq.n	80031f2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031e8:	69b9      	ldr	r1, [r7, #24]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 ffcc 	bl	8004188 <I2C_Slave_ADDR>
 80031f0:	e05a      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x206>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f001 f806 	bl	8004218 <I2C_Slave_STOPF>
 800320c:	e04c      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800320e:	7bbb      	ldrb	r3, [r7, #14]
 8003210:	2b21      	cmp	r3, #33	@ 0x21
 8003212:	d002      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0x212>
 8003214:	7bbb      	ldrb	r3, [r7, #14]
 8003216:	2b29      	cmp	r3, #41	@ 0x29
 8003218:	d120      	bne.n	800325c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <HAL_I2C_EV_IRQHandler+0x238>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_I2C_EV_IRQHandler+0x238>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fee7 	bl	800400c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800323e:	e032      	b.n	80032a6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02d      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0x29e>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003250:	2b00      	cmp	r3, #0
 8003252:	d028      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 ff16 	bl	8004086 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800325a:	e024      	b.n	80032a6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <HAL_I2C_EV_IRQHandler+0x27a>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_I2C_EV_IRQHandler+0x27a>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d103      	bne.n	8003282 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 ff24 	bl	80040c8 <I2C_SlaveReceive_RXNE>
 8003280:	e012      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 ff54 	bl	8004144 <I2C_SlaveReceive_BTF>
 800329c:	e004      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800329e:	bf00      	nop
 80032a0:	e002      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b08a      	sub	sp, #40	@ 0x28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <HAL_I2C_ER_IRQHandler+0x4a>
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80032f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <HAL_I2C_ER_IRQHandler+0x70>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800331c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d03e      	beq.n	80033a6 <HAL_I2C_ER_IRQHandler+0xf8>
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d039      	beq.n	80033a6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003332:	7efb      	ldrb	r3, [r7, #27]
 8003334:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003344:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800334c:	7ebb      	ldrb	r3, [r7, #26]
 800334e:	2b20      	cmp	r3, #32
 8003350:	d112      	bne.n	8003378 <HAL_I2C_ER_IRQHandler+0xca>
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10f      	bne.n	8003378 <HAL_I2C_ER_IRQHandler+0xca>
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	2b21      	cmp	r3, #33	@ 0x21
 800335c:	d008      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b29      	cmp	r3, #41	@ 0x29
 8003362:	d005      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0xc2>
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b28      	cmp	r3, #40	@ 0x28
 8003368:	d106      	bne.n	8003378 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b21      	cmp	r3, #33	@ 0x21
 800336e:	d103      	bne.n	8003378 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f001 f881 	bl	8004478 <I2C_Slave_AF>
 8003376:	e016      	b.n	80033a6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003380:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800338a:	7efb      	ldrb	r3, [r7, #27]
 800338c:	2b10      	cmp	r3, #16
 800338e:	d002      	beq.n	8003396 <HAL_I2C_ER_IRQHandler+0xe8>
 8003390:	7efb      	ldrb	r3, [r7, #27]
 8003392:	2b40      	cmp	r3, #64	@ 0x40
 8003394:	d107      	bne.n	80033a6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00d      	beq.n	80033cc <HAL_I2C_ER_IRQHandler+0x11e>
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80033ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f001 f8be 	bl	8004560 <I2C_ITError>
  }
}
 80033e4:	bf00      	nop
 80033e6:	3728      	adds	r7, #40	@ 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
 8003448:	4613      	mov	r3, r2
 800344a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d150      	bne.n	8003584 <I2C_MasterTransmit_TXE+0xc8>
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	2b21      	cmp	r3, #33	@ 0x21
 80034e6:	d14d      	bne.n	8003584 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d01d      	beq.n	800352a <I2C_MasterTransmit_TXE+0x6e>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d01a      	beq.n	800352a <I2C_MasterTransmit_TXE+0x6e>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034fa:	d016      	beq.n	800352a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800350a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2211      	movs	r2, #17
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ff62 	bl	80033ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003528:	e060      	b.n	80035ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003538:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003548:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b40      	cmp	r3, #64	@ 0x40
 8003562:	d107      	bne.n	8003574 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff7d 	bl	800346c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003572:	e03b      	b.n	80035ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff35 	bl	80033ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003582:	e033      	b.n	80035ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b21      	cmp	r3, #33	@ 0x21
 8003588:	d005      	beq.n	8003596 <I2C_MasterTransmit_TXE+0xda>
 800358a:	7bbb      	ldrb	r3, [r7, #14]
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d12d      	bne.n	80035ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b22      	cmp	r3, #34	@ 0x22
 8003594:	d12a      	bne.n	80035ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035b0:	e01c      	b.n	80035ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b40      	cmp	r3, #64	@ 0x40
 80035bc:	d103      	bne.n	80035c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f88e 	bl	80036e0 <I2C_MemoryTransmit_TXE_BTF>
}
 80035c4:	e012      	b.n	80035ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035ea:	e7ff      	b.n	80035ec <I2C_MasterTransmit_TXE+0x130>
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b21      	cmp	r3, #33	@ 0x21
 800360c:	d164      	bne.n	80036d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d012      	beq.n	800363e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800363c:	e04c      	b.n	80036d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d01d      	beq.n	8003680 <I2C_MasterTransmit_BTF+0x8c>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b20      	cmp	r3, #32
 8003648:	d01a      	beq.n	8003680 <I2C_MasterTransmit_BTF+0x8c>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003650:	d016      	beq.n	8003680 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003660:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2211      	movs	r2, #17
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff feb7 	bl	80033ec <HAL_I2C_MasterTxCpltCallback>
}
 800367e:	e02b      	b.n	80036d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800368e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b40      	cmp	r3, #64	@ 0x40
 80036b8:	d107      	bne.n	80036ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fed2 	bl	800346c <HAL_I2C_MemTxCpltCallback>
}
 80036c8:	e006      	b.n	80036d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fe8a 	bl	80033ec <HAL_I2C_MasterTxCpltCallback>
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11d      	bne.n	8003734 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10b      	bne.n	8003718 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003704:	b2da      	uxtb	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003716:	e077      	b.n	8003808 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371c:	b29b      	uxth	r3, r3
 800371e:	121b      	asrs	r3, r3, #8
 8003720:	b2da      	uxtb	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003732:	e069      	b.n	8003808 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003738:	2b01      	cmp	r3, #1
 800373a:	d10b      	bne.n	8003754 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003740:	b2da      	uxtb	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003752:	e059      	b.n	8003808 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003758:	2b02      	cmp	r3, #2
 800375a:	d152      	bne.n	8003802 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b22      	cmp	r3, #34	@ 0x22
 8003760:	d10d      	bne.n	800377e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003770:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800377c:	e044      	b.n	8003808 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b21      	cmp	r3, #33	@ 0x21
 800378c:	d112      	bne.n	80037b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037b2:	e029      	b.n	8003808 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d124      	bne.n	8003808 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b21      	cmp	r3, #33	@ 0x21
 80037c2:	d121      	bne.n	8003808 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fe36 	bl	800346c <HAL_I2C_MemTxCpltCallback>
}
 8003800:	e002      	b.n	8003808 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff faf0 	bl	8002de8 <I2C_Flush_DR>
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b22      	cmp	r3, #34	@ 0x22
 8003822:	f040 80b9 	bne.w	8003998 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d921      	bls.n	800387e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b03      	cmp	r3, #3
 8003868:	f040 8096 	bne.w	8003998 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800387a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800387c:	e08c      	b.n	8003998 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	2b02      	cmp	r3, #2
 8003884:	d07f      	beq.n	8003986 <I2C_MasterReceive_RXNE+0x176>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <I2C_MasterReceive_RXNE+0x82>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d179      	bne.n	8003986 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f001 fa7e 	bl	8004d94 <I2C_WaitOnSTOPRequestThroughIT>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d14c      	bne.n	8003938 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	d10a      	bne.n	800390e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fdba 	bl	8003480 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800390c:	e044      	b.n	8003998 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d002      	beq.n	8003922 <I2C_MasterReceive_RXNE+0x112>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b20      	cmp	r3, #32
 8003920:	d103      	bne.n	800392a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
 8003928:	e002      	b.n	8003930 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2212      	movs	r2, #18
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fd65 	bl	8003400 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003936:	e02f      	b.n	8003998 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003946:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fd88 	bl	8003494 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003984:	e008      	b.n	8003998 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003994:	605a      	str	r2, [r3, #4]
}
 8003996:	e7ff      	b.n	8003998 <I2C_MasterReceive_RXNE+0x188>
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d11b      	bne.n	80039f0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039ee:	e0c8      	b.n	8003b82 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d129      	bne.n	8003a4e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a08:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d00a      	beq.n	8003a26 <I2C_MasterReceive_BTF+0x86>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d007      	beq.n	8003a26 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a24:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a4c:	e099      	b.n	8003b82 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	f040 8081 	bne.w	8003b5c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d002      	beq.n	8003a66 <I2C_MasterReceive_BTF+0xc6>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d108      	bne.n	8003a78 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e019      	b.n	8003aac <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d002      	beq.n	8003a84 <I2C_MasterReceive_BTF+0xe4>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d108      	bne.n	8003a96 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e00a      	b.n	8003aac <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d007      	beq.n	8003aac <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aaa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b06:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b40      	cmp	r3, #64	@ 0x40
 8003b1a:	d10a      	bne.n	8003b32 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fca8 	bl	8003480 <HAL_I2C_MemRxCpltCallback>
}
 8003b30:	e027      	b.n	8003b82 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d002      	beq.n	8003b46 <I2C_MasterReceive_BTF+0x1a6>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d103      	bne.n	8003b4e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b4c:	e002      	b.n	8003b54 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2212      	movs	r2, #18
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fc53 	bl	8003400 <HAL_I2C_MasterRxCpltCallback>
}
 8003b5a:	e012      	b.n	8003b82 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b40      	cmp	r3, #64	@ 0x40
 8003b9c:	d117      	bne.n	8003bce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bb6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bb8:	e067      	b.n	8003c8a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]
}
 8003bcc:	e05d      	b.n	8003c8a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bd6:	d133      	bne.n	8003c40 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b21      	cmp	r3, #33	@ 0x21
 8003be2:	d109      	bne.n	8003bf8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bf4:	611a      	str	r2, [r3, #16]
 8003bf6:	e008      	b.n	8003c0a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <I2C_Master_SB+0x92>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d108      	bne.n	8003c2e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d032      	beq.n	8003c8a <I2C_Master_SB+0x100>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d02d      	beq.n	8003c8a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c3c:	605a      	str	r2, [r3, #4]
}
 8003c3e:	e024      	b.n	8003c8a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10e      	bne.n	8003c66 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	11db      	asrs	r3, r3, #7
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f003 0306 	and.w	r3, r3, #6
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f063 030f 	orn	r3, r3, #15
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]
}
 8003c64:	e011      	b.n	8003c8a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10d      	bne.n	8003c8a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	11db      	asrs	r3, r3, #7
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f003 0306 	and.w	r3, r3, #6
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f063 030e 	orn	r3, r3, #14
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <I2C_Master_ADD10+0x26>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d108      	bne.n	8003cce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00c      	beq.n	8003cde <I2C_Master_ADD10+0x48>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cdc:	605a      	str	r2, [r3, #4]
  }
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b091      	sub	sp, #68	@ 0x44
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cf8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b22      	cmp	r3, #34	@ 0x22
 8003d12:	f040 8169 	bne.w	8003fe8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <I2C_Master_ADDR+0x54>
 8003d1e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003d22:	2b40      	cmp	r3, #64	@ 0x40
 8003d24:	d10b      	bne.n	8003d3e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	e160      	b.n	8004000 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d11d      	bne.n	8003d82 <I2C_Master_ADDR+0x98>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d4e:	d118      	bne.n	8003d82 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d74:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d80:	e13e      	b.n	8004000 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d113      	bne.n	8003db4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e115      	b.n	8003fe0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	f040 808a 	bne.w	8003ed4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dc6:	d137      	bne.n	8003e38 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003de6:	d113      	bne.n	8003e10 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	e0e7      	b.n	8003fe0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e10:	2300      	movs	r3, #0
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e0d3      	b.n	8003fe0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d02e      	beq.n	8003e9c <I2C_Master_ADDR+0x1b2>
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d02b      	beq.n	8003e9c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e46:	2b12      	cmp	r3, #18
 8003e48:	d102      	bne.n	8003e50 <I2C_Master_ADDR+0x166>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d125      	bne.n	8003e9c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d00e      	beq.n	8003e74 <I2C_Master_ADDR+0x18a>
 8003e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d00b      	beq.n	8003e74 <I2C_Master_ADDR+0x18a>
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d008      	beq.n	8003e74 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e007      	b.n	8003e84 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e82:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	e0a1      	b.n	8003fe0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e085      	b.n	8003fe0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d14d      	bne.n	8003f7a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d016      	beq.n	8003f12 <I2C_Master_ADDR+0x228>
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d013      	beq.n	8003f12 <I2C_Master_ADDR+0x228>
 8003eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d010      	beq.n	8003f12 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e007      	b.n	8003f22 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f20:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f30:	d117      	bne.n	8003f62 <I2C_Master_ADDR+0x278>
 8003f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f38:	d00b      	beq.n	8003f52 <I2C_Master_ADDR+0x268>
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d008      	beq.n	8003f52 <I2C_Master_ADDR+0x268>
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d005      	beq.n	8003f52 <I2C_Master_ADDR+0x268>
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d002      	beq.n	8003f52 <I2C_Master_ADDR+0x268>
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d107      	bne.n	8003f62 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f60:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	e032      	b.n	8003fe0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f88:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f98:	d117      	bne.n	8003fca <I2C_Master_ADDR+0x2e0>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fa0:	d00b      	beq.n	8003fba <I2C_Master_ADDR+0x2d0>
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d008      	beq.n	8003fba <I2C_Master_ADDR+0x2d0>
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d005      	beq.n	8003fba <I2C_Master_ADDR+0x2d0>
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d002      	beq.n	8003fba <I2C_Master_ADDR+0x2d0>
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d107      	bne.n	8003fca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fc8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003fe6:	e00b      	b.n	8004000 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	e7ff      	b.n	8004000 <I2C_Master_ADDR+0x316>
 8004000:	bf00      	nop
 8004002:	3744      	adds	r7, #68	@ 0x44
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d02b      	beq.n	800407e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d114      	bne.n	800407e <I2C_SlaveTransmit_TXE+0x72>
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b29      	cmp	r3, #41	@ 0x29
 8004058:	d111      	bne.n	800407e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004068:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2221      	movs	r2, #33	@ 0x21
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2228      	movs	r2, #40	@ 0x28
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff f9cb 	bl	8003414 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	781a      	ldrb	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d02c      	beq.n	800413c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d114      	bne.n	800413c <I2C_SlaveReceive_RXNE+0x74>
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b2a      	cmp	r3, #42	@ 0x2a
 8004116:	d111      	bne.n	800413c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004126:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2222      	movs	r2, #34	@ 0x22
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2228      	movs	r2, #40	@ 0x28
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff f976 	bl	8003428 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d012      	beq.n	800417c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041a2:	2b28      	cmp	r3, #40	@ 0x28
 80041a4:	d125      	bne.n	80041f2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	81bb      	strh	r3, [r7, #12]
 80041d4:	e002      	b.n	80041dc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041e4:	89ba      	ldrh	r2, [r7, #12]
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff f926 	bl	800343c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041f0:	e00e      	b.n	8004210 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004226:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004236:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004264:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004274:	d172      	bne.n	800435c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b22      	cmp	r3, #34	@ 0x22
 800427a:	d002      	beq.n	8004282 <I2C_Slave_STOPF+0x6a>
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004280:	d135      	bne.n	80042ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	f043 0204 	orr.w	r2, r3, #4
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe f9c6 	bl	800264c <HAL_DMA_GetState>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d049      	beq.n	800435a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	4a69      	ldr	r2, [pc, #420]	@ (8004470 <I2C_Slave_STOPF+0x258>)
 80042cc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe f80e 	bl	80022f4 <HAL_DMA_Abort_IT>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d03d      	beq.n	800435a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042e8:	4610      	mov	r0, r2
 80042ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ec:	e035      	b.n	800435a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f043 0204 	orr.w	r2, r3, #4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004320:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe f990 	bl	800264c <HAL_DMA_GetState>
 800432c:	4603      	mov	r3, r0
 800432e:	2b01      	cmp	r3, #1
 8004330:	d014      	beq.n	800435c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004336:	4a4e      	ldr	r2, [pc, #312]	@ (8004470 <I2C_Slave_STOPF+0x258>)
 8004338:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd ffd8 	bl	80022f4 <HAL_DMA_Abort_IT>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004354:	4610      	mov	r0, r2
 8004356:	4798      	blx	r3
 8004358:	e000      	b.n	800435c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800435a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d03e      	beq.n	80043e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b04      	cmp	r3, #4
 8004372:	d112      	bne.n	800439a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b40      	cmp	r3, #64	@ 0x40
 80043a6:	d112      	bne.n	80043ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f043 0204 	orr.w	r2, r3, #4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f8b7 	bl	8004560 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043f2:	e039      	b.n	8004468 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043f8:	d109      	bne.n	800440e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2228      	movs	r2, #40	@ 0x28
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff f80d 	bl	8003428 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b28      	cmp	r3, #40	@ 0x28
 8004418:	d111      	bne.n	800443e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a15      	ldr	r2, [pc, #84]	@ (8004474 <I2C_Slave_STOPF+0x25c>)
 800441e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff f80e 	bl	8003458 <HAL_I2C_ListenCpltCallback>
}
 800443c:	e014      	b.n	8004468 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	2b22      	cmp	r3, #34	@ 0x22
 8004444:	d002      	beq.n	800444c <I2C_Slave_STOPF+0x234>
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b22      	cmp	r3, #34	@ 0x22
 800444a:	d10d      	bne.n	8004468 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fe ffe0 	bl	8003428 <HAL_I2C_SlaveRxCpltCallback>
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	080048f1 	.word	0x080048f1
 8004474:	ffff0000 	.word	0xffff0000

08004478 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004486:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d002      	beq.n	800449a <I2C_Slave_AF+0x22>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b20      	cmp	r3, #32
 8004498:	d129      	bne.n	80044ee <I2C_Slave_AF+0x76>
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b28      	cmp	r3, #40	@ 0x28
 800449e:	d126      	bne.n	80044ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a2e      	ldr	r2, [pc, #184]	@ (800455c <I2C_Slave_AF+0xe4>)
 80044a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fe ffb6 	bl	8003458 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044ec:	e031      	b.n	8004552 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	2b21      	cmp	r3, #33	@ 0x21
 80044f2:	d129      	bne.n	8004548 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a19      	ldr	r2, [pc, #100]	@ (800455c <I2C_Slave_AF+0xe4>)
 80044f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2221      	movs	r2, #33	@ 0x21
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800451e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004528:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004538:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fe fc54 	bl	8002de8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fe ff67 	bl	8003414 <HAL_I2C_SlaveTxCpltCallback>
}
 8004546:	e004      	b.n	8004552 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004550:	615a      	str	r2, [r3, #20]
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	ffff0000 	.word	0xffff0000

08004560 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004576:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004578:	7bbb      	ldrb	r3, [r7, #14]
 800457a:	2b10      	cmp	r3, #16
 800457c:	d002      	beq.n	8004584 <I2C_ITError+0x24>
 800457e:	7bbb      	ldrb	r3, [r7, #14]
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d10a      	bne.n	800459a <I2C_ITError+0x3a>
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b22      	cmp	r3, #34	@ 0x22
 8004588:	d107      	bne.n	800459a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004598:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045a0:	2b28      	cmp	r3, #40	@ 0x28
 80045a2:	d107      	bne.n	80045b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2228      	movs	r2, #40	@ 0x28
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045b2:	e015      	b.n	80045e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c2:	d00a      	beq.n	80045da <I2C_ITError+0x7a>
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b60      	cmp	r3, #96	@ 0x60
 80045c8:	d007      	beq.n	80045da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ee:	d162      	bne.n	80046b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	d020      	beq.n	8004650 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004612:	4a6a      	ldr	r2, [pc, #424]	@ (80047bc <I2C_ITError+0x25c>)
 8004614:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fe6a 	bl	80022f4 <HAL_DMA_Abort_IT>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8089 	beq.w	800473a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800464a:	4610      	mov	r0, r2
 800464c:	4798      	blx	r3
 800464e:	e074      	b.n	800473a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004654:	4a59      	ldr	r2, [pc, #356]	@ (80047bc <I2C_ITError+0x25c>)
 8004656:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	4618      	mov	r0, r3
 800465e:	f7fd fe49 	bl	80022f4 <HAL_DMA_Abort_IT>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d068      	beq.n	800473a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d10b      	bne.n	800468e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
 80046b4:	e041      	b.n	800473a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b60      	cmp	r3, #96	@ 0x60
 80046c0:	d125      	bne.n	800470e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d10b      	bne.n	80046f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fe fece 	bl	80034a8 <HAL_I2C_AbortCpltCallback>
 800470c:	e015      	b.n	800473a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004718:	2b40      	cmp	r3, #64	@ 0x40
 800471a:	d10b      	bne.n	8004734 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fe fead 	bl	8003494 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10e      	bne.n	8004768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d113      	bne.n	80047b4 <I2C_ITError+0x254>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b28      	cmp	r3, #40	@ 0x28
 8004790:	d110      	bne.n	80047b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a0a      	ldr	r2, [pc, #40]	@ (80047c0 <I2C_ITError+0x260>)
 8004796:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fe fe52 	bl	8003458 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	080048f1 	.word	0x080048f1
 80047c0:	ffff0000 	.word	0xffff0000

080047c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	460b      	mov	r3, r1
 80047d8:	813b      	strh	r3, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f920 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004814:	d103      	bne.n	800481e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800481c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e05f      	b.n	80048e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	492d      	ldr	r1, [pc, #180]	@ (80048ec <I2C_RequestMemoryWrite+0x128>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f97b 	bl	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e04c      	b.n	80048e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004860:	6a39      	ldr	r1, [r7, #32]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa06 	bl	8004c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	2b04      	cmp	r3, #4
 8004874:	d107      	bne.n	8004886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e02b      	b.n	80048e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004890:	893b      	ldrh	r3, [r7, #8]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e021      	b.n	80048e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ac:	6a39      	ldr	r1, [r7, #32]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f9e0 	bl	8004c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00d      	beq.n	80048d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d107      	bne.n	80048d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e005      	b.n	80048e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d6:	893b      	ldrh	r3, [r7, #8]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	00010002 	.word	0x00010002

080048f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004900:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004908:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800490a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a38 <I2C_DMAAbort+0x148>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	08db      	lsrs	r3, r3, #3
 8004910:	4a4a      	ldr	r2, [pc, #296]	@ (8004a3c <I2C_DMAAbort+0x14c>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	0a1a      	lsrs	r2, r3, #8
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	00da      	lsls	r2, r3, #3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004936:	e00a      	b.n	800494e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3b01      	subs	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494c:	d0ea      	beq.n	8004924 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495a:	2200      	movs	r2, #0
 800495c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	2200      	movs	r2, #0
 800496c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800497c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004990:	2200      	movs	r2, #0
 8004992:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a0:	2200      	movs	r2, #0
 80049a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0201 	bic.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b60      	cmp	r3, #96	@ 0x60
 80049be:	d10e      	bne.n	80049de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2200      	movs	r2, #0
 80049d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049d6:	6978      	ldr	r0, [r7, #20]
 80049d8:	f7fe fd66 	bl	80034a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049dc:	e027      	b.n	8004a2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049de:	7cfb      	ldrb	r3, [r7, #19]
 80049e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049e4:	2b28      	cmp	r3, #40	@ 0x28
 80049e6:	d117      	bne.n	8004a18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2228      	movs	r2, #40	@ 0x28
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a16:	e007      	b.n	8004a28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a28:	6978      	ldr	r0, [r7, #20]
 8004a2a:	f7fe fd33 	bl	8003494 <HAL_I2C_ErrorCallback>
}
 8004a2e:	bf00      	nop
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	14f8b589 	.word	0x14f8b589

08004a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a50:	e048      	b.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a58:	d044      	beq.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7fc fcdd 	bl	8001418 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d139      	bne.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d10d      	bne.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	43da      	mvns	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	e00c      	b.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d116      	bne.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	f043 0220 	orr.w	r2, r3, #32
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e023      	b.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	0c1b      	lsrs	r3, r3, #16
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10d      	bne.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	43da      	mvns	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4013      	ands	r3, r2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	e00c      	b.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d093      	beq.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b42:	e071      	b.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b52:	d123      	bne.n	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	f043 0204 	orr.w	r2, r3, #4
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e067      	b.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d041      	beq.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba4:	f7fc fc38 	bl	8001418 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d136      	bne.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d10c      	bne.n	8004bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	e00b      	b.n	8004bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	43da      	mvns	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4013      	ands	r3, r2
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d016      	beq.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e021      	b.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10c      	bne.n	8004c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e00b      	b.n	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	43da      	mvns	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4013      	ands	r3, r2
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf14      	ite	ne
 8004c5e:	2301      	movne	r3, #1
 8004c60:	2300      	moveq	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f47f af6d 	bne.w	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c80:	e034      	b.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f8b8 	bl	8004df8 <I2C_IsAcknowledgeFailed>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e034      	b.n	8004cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d028      	beq.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9a:	f7fc fbbd 	bl	8001418 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11d      	bne.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d016      	beq.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e007      	b.n	8004cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf6:	2b80      	cmp	r3, #128	@ 0x80
 8004cf8:	d1c3      	bne.n	8004c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d10:	e034      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f870 	bl	8004df8 <I2C_IsAcknowledgeFailed>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e034      	b.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d028      	beq.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2a:	f7fc fb75 	bl	8001418 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d11d      	bne.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d016      	beq.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d68:	f043 0220 	orr.w	r2, r3, #32
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e007      	b.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d1c3      	bne.n	8004d12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004da0:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	0a1a      	lsrs	r2, r3, #8
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d107      	bne.n	8004dd2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e008      	b.n	8004de4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de0:	d0e9      	beq.n	8004db6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000000 	.word	0x20000000
 8004df4:	14f8b589 	.word	0x14f8b589

08004df8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0e:	d11b      	bne.n	8004e48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	f043 0204 	orr.w	r2, r3, #4
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e62:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004e66:	d103      	bne.n	8004e70 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e6e:	e007      	b.n	8004e80 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e78:	d102      	bne.n	8004e80 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e267      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d075      	beq.n	8004f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eaa:	4b88      	ldr	r3, [pc, #544]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d00c      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb6:	4b85      	ldr	r3, [pc, #532]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d112      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec2:	4b82      	ldr	r3, [pc, #520]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ece:	d10b      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05b      	beq.n	8004f94 <HAL_RCC_OscConfig+0x108>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d157      	bne.n	8004f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e242      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef0:	d106      	bne.n	8004f00 <HAL_RCC_OscConfig+0x74>
 8004ef2:	4b76      	ldr	r3, [pc, #472]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a75      	ldr	r2, [pc, #468]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e01d      	b.n	8004f3c <HAL_RCC_OscConfig+0xb0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x98>
 8004f0a:	4b70      	ldr	r3, [pc, #448]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a6f      	ldr	r2, [pc, #444]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	4b6d      	ldr	r3, [pc, #436]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a6c      	ldr	r2, [pc, #432]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e00b      	b.n	8004f3c <HAL_RCC_OscConfig+0xb0>
 8004f24:	4b69      	ldr	r3, [pc, #420]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a68      	ldr	r2, [pc, #416]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b66      	ldr	r3, [pc, #408]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a65      	ldr	r2, [pc, #404]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d013      	beq.n	8004f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fc fa68 	bl	8001418 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f4c:	f7fc fa64 	bl	8001418 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	@ 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e207      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0xc0>
 8004f6a:	e014      	b.n	8004f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fc fa54 	bl	8001418 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fc fa50 	bl	8001418 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	@ 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e1f3      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f86:	4b51      	ldr	r3, [pc, #324]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0xe8>
 8004f92:	e000      	b.n	8004f96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d063      	beq.n	800506a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fae:	4b47      	ldr	r3, [pc, #284]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d11c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b44      	ldr	r3, [pc, #272]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d116      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc6:	4b41      	ldr	r3, [pc, #260]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_RCC_OscConfig+0x152>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e1c7      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fde:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4937      	ldr	r1, [pc, #220]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff2:	e03a      	b.n	800506a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d020      	beq.n	800503e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ffc:	4b34      	ldr	r3, [pc, #208]	@ (80050d0 <HAL_RCC_OscConfig+0x244>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005002:	f7fc fa09 	bl	8001418 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500a:	f7fc fa05 	bl	8001418 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e1a8      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501c:	4b2b      	ldr	r3, [pc, #172]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b28      	ldr	r3, [pc, #160]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4925      	ldr	r1, [pc, #148]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]
 800503c:	e015      	b.n	800506a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503e:	4b24      	ldr	r3, [pc, #144]	@ (80050d0 <HAL_RCC_OscConfig+0x244>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fc f9e8 	bl	8001418 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504c:	f7fc f9e4 	bl	8001418 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e187      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d036      	beq.n	80050e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507e:	4b15      	ldr	r3, [pc, #84]	@ (80050d4 <HAL_RCC_OscConfig+0x248>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fc f9c8 	bl	8001418 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508c:	f7fc f9c4 	bl	8001418 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e167      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509e:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <HAL_RCC_OscConfig+0x240>)
 80050a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x200>
 80050aa:	e01b      	b.n	80050e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ac:	4b09      	ldr	r3, [pc, #36]	@ (80050d4 <HAL_RCC_OscConfig+0x248>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b2:	f7fc f9b1 	bl	8001418 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b8:	e00e      	b.n	80050d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ba:	f7fc f9ad 	bl	8001418 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d907      	bls.n	80050d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e150      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	42470000 	.word	0x42470000
 80050d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d8:	4b88      	ldr	r3, [pc, #544]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 80050da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ea      	bne.n	80050ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8097 	beq.w	8005220 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f6:	4b81      	ldr	r3, [pc, #516]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	4b7d      	ldr	r3, [pc, #500]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	4a7c      	ldr	r2, [pc, #496]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005110:	6413      	str	r3, [r2, #64]	@ 0x40
 8005112:	4b7a      	ldr	r3, [pc, #488]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b77      	ldr	r3, [pc, #476]	@ (8005300 <HAL_RCC_OscConfig+0x474>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b74      	ldr	r3, [pc, #464]	@ (8005300 <HAL_RCC_OscConfig+0x474>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a73      	ldr	r2, [pc, #460]	@ (8005300 <HAL_RCC_OscConfig+0x474>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fc f96d 	bl	8001418 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7fc f969 	bl	8001418 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e10c      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	4b6a      	ldr	r3, [pc, #424]	@ (8005300 <HAL_RCC_OscConfig+0x474>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x2ea>
 8005168:	4b64      	ldr	r3, [pc, #400]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516c:	4a63      	ldr	r2, [pc, #396]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	@ 0x70
 8005174:	e01c      	b.n	80051b0 <HAL_RCC_OscConfig+0x324>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b05      	cmp	r3, #5
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x30c>
 800517e:	4b5f      	ldr	r3, [pc, #380]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	4a5e      	ldr	r2, [pc, #376]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005184:	f043 0304 	orr.w	r3, r3, #4
 8005188:	6713      	str	r3, [r2, #112]	@ 0x70
 800518a:	4b5c      	ldr	r3, [pc, #368]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518e:	4a5b      	ldr	r2, [pc, #364]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	@ 0x70
 8005196:	e00b      	b.n	80051b0 <HAL_RCC_OscConfig+0x324>
 8005198:	4b58      	ldr	r3, [pc, #352]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519c:	4a57      	ldr	r2, [pc, #348]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a4:	4b55      	ldr	r3, [pc, #340]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a54      	ldr	r2, [pc, #336]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 80051aa:	f023 0304 	bic.w	r3, r3, #4
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b8:	f7fc f92e 	bl	8001418 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c0:	f7fc f92a 	bl	8001418 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e0cb      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d6:	4b49      	ldr	r3, [pc, #292]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0ee      	beq.n	80051c0 <HAL_RCC_OscConfig+0x334>
 80051e2:	e014      	b.n	800520e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e4:	f7fc f918 	bl	8001418 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ec:	f7fc f914 	bl	8001418 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0b5      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005202:	4b3e      	ldr	r3, [pc, #248]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ee      	bne.n	80051ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005214:	4b39      	ldr	r3, [pc, #228]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	4a38      	ldr	r2, [pc, #224]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 800521a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a1 	beq.w	800536c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522a:	4b34      	ldr	r3, [pc, #208]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b08      	cmp	r3, #8
 8005234:	d05c      	beq.n	80052f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d141      	bne.n	80052c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523e:	4b31      	ldr	r3, [pc, #196]	@ (8005304 <HAL_RCC_OscConfig+0x478>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fc f8e8 	bl	8001418 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fc f8e4 	bl	8001418 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e087      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525e:	4b27      	ldr	r3, [pc, #156]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	491b      	ldr	r1, [pc, #108]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005294:	4b1b      	ldr	r3, [pc, #108]	@ (8005304 <HAL_RCC_OscConfig+0x478>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529a:	f7fc f8bd 	bl	8001418 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a2:	f7fc f8b9 	bl	8001418 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e05c      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b4:	4b11      	ldr	r3, [pc, #68]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x416>
 80052c0:	e054      	b.n	800536c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c2:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <HAL_RCC_OscConfig+0x478>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7fc f8a6 	bl	8001418 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fc f8a2 	bl	8001418 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e045      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <HAL_RCC_OscConfig+0x470>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x444>
 80052ee:	e03d      	b.n	800536c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e038      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
 80052fc:	40023800 	.word	0x40023800
 8005300:	40007000 	.word	0x40007000
 8005304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005308:	4b1b      	ldr	r3, [pc, #108]	@ (8005378 <HAL_RCC_OscConfig+0x4ec>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d028      	beq.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d121      	bne.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d11a      	bne.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800533e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005340:	4293      	cmp	r3, r2
 8005342:	d111      	bne.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	3b01      	subs	r3, #1
 8005352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d107      	bne.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800

0800537c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0cc      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b68      	ldr	r3, [pc, #416]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d90c      	bls.n	80053b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b65      	ldr	r3, [pc, #404]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a6:	4b63      	ldr	r3, [pc, #396]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0b8      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d0:	4b59      	ldr	r3, [pc, #356]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a58      	ldr	r2, [pc, #352]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e8:	4b53      	ldr	r3, [pc, #332]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4a52      	ldr	r2, [pc, #328]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f4:	4b50      	ldr	r3, [pc, #320]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	494d      	ldr	r1, [pc, #308]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	4313      	orrs	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d044      	beq.n	800549c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d107      	bne.n	800542a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541a:	4b47      	ldr	r3, [pc, #284]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d119      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e07f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d003      	beq.n	800543a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005436:	2b03      	cmp	r3, #3
 8005438:	d107      	bne.n	800544a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543a:	4b3f      	ldr	r3, [pc, #252]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e06f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544a:	4b3b      	ldr	r3, [pc, #236]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e067      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545a:	4b37      	ldr	r3, [pc, #220]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 0203 	bic.w	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4934      	ldr	r1, [pc, #208]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800546c:	f7fb ffd4 	bl	8001418 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	e00a      	b.n	800548a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005474:	f7fb ffd0 	bl	8001418 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e04f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548a:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 020c 	and.w	r2, r3, #12
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	429a      	cmp	r2, r3
 800549a:	d1eb      	bne.n	8005474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d20c      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b22      	ldr	r3, [pc, #136]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b20      	ldr	r3, [pc, #128]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e032      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d0:	4b19      	ldr	r3, [pc, #100]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4916      	ldr	r1, [pc, #88]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ee:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	490e      	ldr	r1, [pc, #56]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005502:	f000 f821 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 8005506:	4602      	mov	r2, r0
 8005508:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	490a      	ldr	r1, [pc, #40]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 8005514:	5ccb      	ldrb	r3, [r1, r3]
 8005516:	fa22 f303 	lsr.w	r3, r2, r3
 800551a:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800551e:	4b09      	ldr	r3, [pc, #36]	@ (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fb ff34 	bl	8001390 <HAL_InitTick>

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023c00 	.word	0x40023c00
 8005538:	40023800 	.word	0x40023800
 800553c:	08007794 	.word	0x08007794
 8005540:	20000000 	.word	0x20000000
 8005544:	20000004 	.word	0x20000004

08005548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800554c:	b090      	sub	sp, #64	@ 0x40
 800554e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005560:	4b59      	ldr	r3, [pc, #356]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	2b08      	cmp	r3, #8
 800556a:	d00d      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x40>
 800556c:	2b08      	cmp	r3, #8
 800556e:	f200 80a1 	bhi.w	80056b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x34>
 8005576:	2b04      	cmp	r3, #4
 8005578:	d003      	beq.n	8005582 <HAL_RCC_GetSysClockFreq+0x3a>
 800557a:	e09b      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800557c:	4b53      	ldr	r3, [pc, #332]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x184>)
 800557e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005580:	e09b      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005582:	4b53      	ldr	r3, [pc, #332]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005584:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005586:	e098      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005588:	4b4f      	ldr	r3, [pc, #316]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005590:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005592:	4b4d      	ldr	r3, [pc, #308]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d028      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559e:	4b4a      	ldr	r3, [pc, #296]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	099b      	lsrs	r3, r3, #6
 80055a4:	2200      	movs	r2, #0
 80055a6:	623b      	str	r3, [r7, #32]
 80055a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055b0:	2100      	movs	r1, #0
 80055b2:	4b47      	ldr	r3, [pc, #284]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80055b4:	fb03 f201 	mul.w	r2, r3, r1
 80055b8:	2300      	movs	r3, #0
 80055ba:	fb00 f303 	mul.w	r3, r0, r3
 80055be:	4413      	add	r3, r2
 80055c0:	4a43      	ldr	r2, [pc, #268]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80055c2:	fba0 1202 	umull	r1, r2, r0, r2
 80055c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c8:	460a      	mov	r2, r1
 80055ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80055cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ce:	4413      	add	r3, r2
 80055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d4:	2200      	movs	r2, #0
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	61fa      	str	r2, [r7, #28]
 80055da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80055e2:	f7fa fe4d 	bl	8000280 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4613      	mov	r3, r2
 80055ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ee:	e053      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f0:	4b35      	ldr	r3, [pc, #212]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	2200      	movs	r2, #0
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	617a      	str	r2, [r7, #20]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005602:	f04f 0b00 	mov.w	fp, #0
 8005606:	4652      	mov	r2, sl
 8005608:	465b      	mov	r3, fp
 800560a:	f04f 0000 	mov.w	r0, #0
 800560e:	f04f 0100 	mov.w	r1, #0
 8005612:	0159      	lsls	r1, r3, #5
 8005614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005618:	0150      	lsls	r0, r2, #5
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	ebb2 080a 	subs.w	r8, r2, sl
 8005622:	eb63 090b 	sbc.w	r9, r3, fp
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005632:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005636:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800563a:	ebb2 0408 	subs.w	r4, r2, r8
 800563e:	eb63 0509 	sbc.w	r5, r3, r9
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	00eb      	lsls	r3, r5, #3
 800564c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005650:	00e2      	lsls	r2, r4, #3
 8005652:	4614      	mov	r4, r2
 8005654:	461d      	mov	r5, r3
 8005656:	eb14 030a 	adds.w	r3, r4, sl
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	eb45 030b 	adc.w	r3, r5, fp
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800566e:	4629      	mov	r1, r5
 8005670:	028b      	lsls	r3, r1, #10
 8005672:	4621      	mov	r1, r4
 8005674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005678:	4621      	mov	r1, r4
 800567a:	028a      	lsls	r2, r1, #10
 800567c:	4610      	mov	r0, r2
 800567e:	4619      	mov	r1, r3
 8005680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005682:	2200      	movs	r2, #0
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	60fa      	str	r2, [r7, #12]
 8005688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800568c:	f7fa fdf8 	bl	8000280 <__aeabi_uldivmod>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4613      	mov	r3, r2
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005698:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80056a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056b2:	e002      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x184>)
 80056b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3740      	adds	r7, #64	@ 0x40
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	017d7840 	.word	0x017d7840

080056d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000000 	.word	0x20000000

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056f0:	f7ff fff0 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	@ (800570c <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0a9b      	lsrs	r3, r3, #10
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4903      	ldr	r1, [pc, #12]	@ (8005710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40023800 	.word	0x40023800
 8005710:	080077a4 	.word	0x080077a4

08005714 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e041      	b.n	80057aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fb fd80 	bl	8001240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 f9a0 	bl	8005a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_TIM_PWM_Start+0x24>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	bf14      	ite	ne
 80057d0:	2301      	movne	r3, #1
 80057d2:	2300      	moveq	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	e022      	b.n	800581e <HAL_TIM_PWM_Start+0x6a>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d109      	bne.n	80057f2 <HAL_TIM_PWM_Start+0x3e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	bf14      	ite	ne
 80057ea:	2301      	movne	r3, #1
 80057ec:	2300      	moveq	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	e015      	b.n	800581e <HAL_TIM_PWM_Start+0x6a>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d109      	bne.n	800580c <HAL_TIM_PWM_Start+0x58>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e008      	b.n	800581e <HAL_TIM_PWM_Start+0x6a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e068      	b.n	80058f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <HAL_TIM_PWM_Start+0x82>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005834:	e013      	b.n	800585e <HAL_TIM_PWM_Start+0xaa>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b04      	cmp	r3, #4
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start+0x92>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005844:	e00b      	b.n	800585e <HAL_TIM_PWM_Start+0xaa>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d104      	bne.n	8005856 <HAL_TIM_PWM_Start+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005854:	e003      	b.n	800585e <HAL_TIM_PWM_Start+0xaa>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2201      	movs	r2, #1
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fb2e 	bl	8005ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a23      	ldr	r2, [pc, #140]	@ (8005900 <HAL_TIM_PWM_Start+0x14c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d107      	bne.n	8005886 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <HAL_TIM_PWM_Start+0x14c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d018      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x10e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005898:	d013      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x10e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a19      	ldr	r2, [pc, #100]	@ (8005904 <HAL_TIM_PWM_Start+0x150>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x10e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a17      	ldr	r2, [pc, #92]	@ (8005908 <HAL_TIM_PWM_Start+0x154>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d009      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x10e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a16      	ldr	r2, [pc, #88]	@ (800590c <HAL_TIM_PWM_Start+0x158>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x10e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a14      	ldr	r2, [pc, #80]	@ (8005910 <HAL_TIM_PWM_Start+0x15c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d111      	bne.n	80058e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b06      	cmp	r3, #6
 80058d2:	d010      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e4:	e007      	b.n	80058f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40010000 	.word	0x40010000
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	40000c00 	.word	0x40000c00
 8005910:	40014000 	.word	0x40014000

08005914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800592e:	2302      	movs	r3, #2
 8005930:	e0ae      	b.n	8005a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	f200 809f 	bhi.w	8005a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005942:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	0800597d 	.word	0x0800597d
 800594c:	08005a81 	.word	0x08005a81
 8005950:	08005a81 	.word	0x08005a81
 8005954:	08005a81 	.word	0x08005a81
 8005958:	080059bd 	.word	0x080059bd
 800595c:	08005a81 	.word	0x08005a81
 8005960:	08005a81 	.word	0x08005a81
 8005964:	08005a81 	.word	0x08005a81
 8005968:	080059ff 	.word	0x080059ff
 800596c:	08005a81 	.word	0x08005a81
 8005970:	08005a81 	.word	0x08005a81
 8005974:	08005a81 	.word	0x08005a81
 8005978:	08005a3f 	.word	0x08005a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f914 	bl	8005bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0208 	orr.w	r2, r2, #8
 8005996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0204 	bic.w	r2, r2, #4
 80059a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6999      	ldr	r1, [r3, #24]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	619a      	str	r2, [r3, #24]
      break;
 80059ba:	e064      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f95a 	bl	8005c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6999      	ldr	r1, [r3, #24]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	619a      	str	r2, [r3, #24]
      break;
 80059fc:	e043      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 f9a5 	bl	8005d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0208 	orr.w	r2, r2, #8
 8005a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0204 	bic.w	r2, r2, #4
 8005a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69d9      	ldr	r1, [r3, #28]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	61da      	str	r2, [r3, #28]
      break;
 8005a3c:	e023      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 f9ef 	bl	8005e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	021a      	lsls	r2, r3, #8
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	61da      	str	r2, [r3, #28]
      break;
 8005a7e:	e002      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8005b94 <TIM_Base_SetConfig+0xfc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a37      	ldr	r2, [pc, #220]	@ (8005b98 <TIM_Base_SetConfig+0x100>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a36      	ldr	r2, [pc, #216]	@ (8005b9c <TIM_Base_SetConfig+0x104>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a35      	ldr	r2, [pc, #212]	@ (8005ba0 <TIM_Base_SetConfig+0x108>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d108      	bne.n	8005ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b94 <TIM_Base_SetConfig+0xfc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01b      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af0:	d017      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a28      	ldr	r2, [pc, #160]	@ (8005b98 <TIM_Base_SetConfig+0x100>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	@ (8005b9c <TIM_Base_SetConfig+0x104>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	@ (8005ba0 <TIM_Base_SetConfig+0x108>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	@ (8005ba4 <TIM_Base_SetConfig+0x10c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a24      	ldr	r2, [pc, #144]	@ (8005ba8 <TIM_Base_SetConfig+0x110>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a23      	ldr	r2, [pc, #140]	@ (8005bac <TIM_Base_SetConfig+0x114>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d108      	bne.n	8005b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8005b94 <TIM_Base_SetConfig+0xfc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d103      	bne.n	8005b68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d105      	bne.n	8005b86 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]
  }
}
 8005b86:	bf00      	nop
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f023 0201 	bic.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 0302 	bic.w	r3, r3, #2
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a1c      	ldr	r2, [pc, #112]	@ (8005c78 <TIM_OC1_SetConfig+0xc8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d10c      	bne.n	8005c26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0308 	bic.w	r3, r3, #8
 8005c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f023 0304 	bic.w	r3, r3, #4
 8005c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a13      	ldr	r2, [pc, #76]	@ (8005c78 <TIM_OC1_SetConfig+0xc8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d111      	bne.n	8005c52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40010000 	.word	0x40010000

08005c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f023 0210 	bic.w	r2, r3, #16
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0320 	bic.w	r3, r3, #32
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d50 <TIM_OC2_SetConfig+0xd4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10d      	bne.n	8005cf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <TIM_OC2_SetConfig+0xd4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d113      	bne.n	8005d28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40010000 	.word	0x40010000

08005d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <TIM_OC3_SetConfig+0xd0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10d      	bne.n	8005dce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a14      	ldr	r2, [pc, #80]	@ (8005e24 <TIM_OC3_SetConfig+0xd0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d113      	bne.n	8005dfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	40010000 	.word	0x40010000

08005e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	031b      	lsls	r3, r3, #12
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a10      	ldr	r2, [pc, #64]	@ (8005ec4 <TIM_OC4_SetConfig+0x9c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d109      	bne.n	8005e9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000

08005ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2201      	movs	r2, #1
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	401a      	ands	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e050      	b.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f78:	d013      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	@ (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a16      	ldr	r2, [pc, #88]	@ (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a15      	ldr	r2, [pc, #84]	@ (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a13      	ldr	r2, [pc, #76]	@ (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d10c      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800
 8005fe8:	40000c00 	.word	0x40000c00
 8005fec:	40014000 	.word	0x40014000

08005ff0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006008:	2302      	movs	r3, #2
 800600a:	e03d      	b.n	8006088 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <sniprintf>:
 8006094:	b40c      	push	{r2, r3}
 8006096:	b530      	push	{r4, r5, lr}
 8006098:	4b17      	ldr	r3, [pc, #92]	@ (80060f8 <sniprintf+0x64>)
 800609a:	1e0c      	subs	r4, r1, #0
 800609c:	681d      	ldr	r5, [r3, #0]
 800609e:	b09d      	sub	sp, #116	@ 0x74
 80060a0:	da08      	bge.n	80060b4 <sniprintf+0x20>
 80060a2:	238b      	movs	r3, #139	@ 0x8b
 80060a4:	602b      	str	r3, [r5, #0]
 80060a6:	f04f 30ff 	mov.w	r0, #4294967295
 80060aa:	b01d      	add	sp, #116	@ 0x74
 80060ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060b0:	b002      	add	sp, #8
 80060b2:	4770      	bx	lr
 80060b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80060b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060bc:	bf14      	ite	ne
 80060be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060c2:	4623      	moveq	r3, r4
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	9307      	str	r3, [sp, #28]
 80060c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060cc:	9002      	str	r0, [sp, #8]
 80060ce:	9006      	str	r0, [sp, #24]
 80060d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060d6:	ab21      	add	r3, sp, #132	@ 0x84
 80060d8:	a902      	add	r1, sp, #8
 80060da:	4628      	mov	r0, r5
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	f000 f9a3 	bl	8006428 <_svfiprintf_r>
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	bfbc      	itt	lt
 80060e6:	238b      	movlt	r3, #139	@ 0x8b
 80060e8:	602b      	strlt	r3, [r5, #0]
 80060ea:	2c00      	cmp	r4, #0
 80060ec:	d0dd      	beq.n	80060aa <sniprintf+0x16>
 80060ee:	9b02      	ldr	r3, [sp, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	e7d9      	b.n	80060aa <sniprintf+0x16>
 80060f6:	bf00      	nop
 80060f8:	2000000c 	.word	0x2000000c

080060fc <memset>:
 80060fc:	4402      	add	r2, r0
 80060fe:	4603      	mov	r3, r0
 8006100:	4293      	cmp	r3, r2
 8006102:	d100      	bne.n	8006106 <memset+0xa>
 8006104:	4770      	bx	lr
 8006106:	f803 1b01 	strb.w	r1, [r3], #1
 800610a:	e7f9      	b.n	8006100 <memset+0x4>

0800610c <__errno>:
 800610c:	4b01      	ldr	r3, [pc, #4]	@ (8006114 <__errno+0x8>)
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	2000000c 	.word	0x2000000c

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4d0d      	ldr	r5, [pc, #52]	@ (8006150 <__libc_init_array+0x38>)
 800611c:	4c0d      	ldr	r4, [pc, #52]	@ (8006154 <__libc_init_array+0x3c>)
 800611e:	1b64      	subs	r4, r4, r5
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	2600      	movs	r6, #0
 8006124:	42a6      	cmp	r6, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	4d0b      	ldr	r5, [pc, #44]	@ (8006158 <__libc_init_array+0x40>)
 800612a:	4c0c      	ldr	r4, [pc, #48]	@ (800615c <__libc_init_array+0x44>)
 800612c:	f000 fc66 	bl	80069fc <_init>
 8006130:	1b64      	subs	r4, r4, r5
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	2600      	movs	r6, #0
 8006136:	42a6      	cmp	r6, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006140:	4798      	blx	r3
 8006142:	3601      	adds	r6, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f855 3b04 	ldr.w	r3, [r5], #4
 800614a:	4798      	blx	r3
 800614c:	3601      	adds	r6, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	080077f0 	.word	0x080077f0
 8006154:	080077f0 	.word	0x080077f0
 8006158:	080077f0 	.word	0x080077f0
 800615c:	080077f4 	.word	0x080077f4

08006160 <__retarget_lock_acquire_recursive>:
 8006160:	4770      	bx	lr

08006162 <__retarget_lock_release_recursive>:
 8006162:	4770      	bx	lr

08006164 <memcpy>:
 8006164:	440a      	add	r2, r1
 8006166:	4291      	cmp	r1, r2
 8006168:	f100 33ff 	add.w	r3, r0, #4294967295
 800616c:	d100      	bne.n	8006170 <memcpy+0xc>
 800616e:	4770      	bx	lr
 8006170:	b510      	push	{r4, lr}
 8006172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800617a:	4291      	cmp	r1, r2
 800617c:	d1f9      	bne.n	8006172 <memcpy+0xe>
 800617e:	bd10      	pop	{r4, pc}

08006180 <_free_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4605      	mov	r5, r0
 8006184:	2900      	cmp	r1, #0
 8006186:	d041      	beq.n	800620c <_free_r+0x8c>
 8006188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618c:	1f0c      	subs	r4, r1, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfb8      	it	lt
 8006192:	18e4      	addlt	r4, r4, r3
 8006194:	f000 f8e0 	bl	8006358 <__malloc_lock>
 8006198:	4a1d      	ldr	r2, [pc, #116]	@ (8006210 <_free_r+0x90>)
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	b933      	cbnz	r3, 80061ac <_free_r+0x2c>
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	6014      	str	r4, [r2, #0]
 80061a2:	4628      	mov	r0, r5
 80061a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a8:	f000 b8dc 	b.w	8006364 <__malloc_unlock>
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	d908      	bls.n	80061c2 <_free_r+0x42>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	1821      	adds	r1, r4, r0
 80061b4:	428b      	cmp	r3, r1
 80061b6:	bf01      	itttt	eq
 80061b8:	6819      	ldreq	r1, [r3, #0]
 80061ba:	685b      	ldreq	r3, [r3, #4]
 80061bc:	1809      	addeq	r1, r1, r0
 80061be:	6021      	streq	r1, [r4, #0]
 80061c0:	e7ed      	b.n	800619e <_free_r+0x1e>
 80061c2:	461a      	mov	r2, r3
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	b10b      	cbz	r3, 80061cc <_free_r+0x4c>
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d9fa      	bls.n	80061c2 <_free_r+0x42>
 80061cc:	6811      	ldr	r1, [r2, #0]
 80061ce:	1850      	adds	r0, r2, r1
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	d10b      	bne.n	80061ec <_free_r+0x6c>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	4401      	add	r1, r0
 80061d8:	1850      	adds	r0, r2, r1
 80061da:	4283      	cmp	r3, r0
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	d1e0      	bne.n	80061a2 <_free_r+0x22>
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	6053      	str	r3, [r2, #4]
 80061e6:	4408      	add	r0, r1
 80061e8:	6010      	str	r0, [r2, #0]
 80061ea:	e7da      	b.n	80061a2 <_free_r+0x22>
 80061ec:	d902      	bls.n	80061f4 <_free_r+0x74>
 80061ee:	230c      	movs	r3, #12
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	e7d6      	b.n	80061a2 <_free_r+0x22>
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	1821      	adds	r1, r4, r0
 80061f8:	428b      	cmp	r3, r1
 80061fa:	bf04      	itt	eq
 80061fc:	6819      	ldreq	r1, [r3, #0]
 80061fe:	685b      	ldreq	r3, [r3, #4]
 8006200:	6063      	str	r3, [r4, #4]
 8006202:	bf04      	itt	eq
 8006204:	1809      	addeq	r1, r1, r0
 8006206:	6021      	streq	r1, [r4, #0]
 8006208:	6054      	str	r4, [r2, #4]
 800620a:	e7ca      	b.n	80061a2 <_free_r+0x22>
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	bf00      	nop
 8006210:	2000072c 	.word	0x2000072c

08006214 <sbrk_aligned>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4e0f      	ldr	r6, [pc, #60]	@ (8006254 <sbrk_aligned+0x40>)
 8006218:	460c      	mov	r4, r1
 800621a:	6831      	ldr	r1, [r6, #0]
 800621c:	4605      	mov	r5, r0
 800621e:	b911      	cbnz	r1, 8006226 <sbrk_aligned+0x12>
 8006220:	f000 fba6 	bl	8006970 <_sbrk_r>
 8006224:	6030      	str	r0, [r6, #0]
 8006226:	4621      	mov	r1, r4
 8006228:	4628      	mov	r0, r5
 800622a:	f000 fba1 	bl	8006970 <_sbrk_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d103      	bne.n	800623a <sbrk_aligned+0x26>
 8006232:	f04f 34ff 	mov.w	r4, #4294967295
 8006236:	4620      	mov	r0, r4
 8006238:	bd70      	pop	{r4, r5, r6, pc}
 800623a:	1cc4      	adds	r4, r0, #3
 800623c:	f024 0403 	bic.w	r4, r4, #3
 8006240:	42a0      	cmp	r0, r4
 8006242:	d0f8      	beq.n	8006236 <sbrk_aligned+0x22>
 8006244:	1a21      	subs	r1, r4, r0
 8006246:	4628      	mov	r0, r5
 8006248:	f000 fb92 	bl	8006970 <_sbrk_r>
 800624c:	3001      	adds	r0, #1
 800624e:	d1f2      	bne.n	8006236 <sbrk_aligned+0x22>
 8006250:	e7ef      	b.n	8006232 <sbrk_aligned+0x1e>
 8006252:	bf00      	nop
 8006254:	20000728 	.word	0x20000728

08006258 <_malloc_r>:
 8006258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800625c:	1ccd      	adds	r5, r1, #3
 800625e:	f025 0503 	bic.w	r5, r5, #3
 8006262:	3508      	adds	r5, #8
 8006264:	2d0c      	cmp	r5, #12
 8006266:	bf38      	it	cc
 8006268:	250c      	movcc	r5, #12
 800626a:	2d00      	cmp	r5, #0
 800626c:	4606      	mov	r6, r0
 800626e:	db01      	blt.n	8006274 <_malloc_r+0x1c>
 8006270:	42a9      	cmp	r1, r5
 8006272:	d904      	bls.n	800627e <_malloc_r+0x26>
 8006274:	230c      	movs	r3, #12
 8006276:	6033      	str	r3, [r6, #0]
 8006278:	2000      	movs	r0, #0
 800627a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006354 <_malloc_r+0xfc>
 8006282:	f000 f869 	bl	8006358 <__malloc_lock>
 8006286:	f8d8 3000 	ldr.w	r3, [r8]
 800628a:	461c      	mov	r4, r3
 800628c:	bb44      	cbnz	r4, 80062e0 <_malloc_r+0x88>
 800628e:	4629      	mov	r1, r5
 8006290:	4630      	mov	r0, r6
 8006292:	f7ff ffbf 	bl	8006214 <sbrk_aligned>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	4604      	mov	r4, r0
 800629a:	d158      	bne.n	800634e <_malloc_r+0xf6>
 800629c:	f8d8 4000 	ldr.w	r4, [r8]
 80062a0:	4627      	mov	r7, r4
 80062a2:	2f00      	cmp	r7, #0
 80062a4:	d143      	bne.n	800632e <_malloc_r+0xd6>
 80062a6:	2c00      	cmp	r4, #0
 80062a8:	d04b      	beq.n	8006342 <_malloc_r+0xea>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	4639      	mov	r1, r7
 80062ae:	4630      	mov	r0, r6
 80062b0:	eb04 0903 	add.w	r9, r4, r3
 80062b4:	f000 fb5c 	bl	8006970 <_sbrk_r>
 80062b8:	4581      	cmp	r9, r0
 80062ba:	d142      	bne.n	8006342 <_malloc_r+0xea>
 80062bc:	6821      	ldr	r1, [r4, #0]
 80062be:	1a6d      	subs	r5, r5, r1
 80062c0:	4629      	mov	r1, r5
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7ff ffa6 	bl	8006214 <sbrk_aligned>
 80062c8:	3001      	adds	r0, #1
 80062ca:	d03a      	beq.n	8006342 <_malloc_r+0xea>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	442b      	add	r3, r5
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	f8d8 3000 	ldr.w	r3, [r8]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	bb62      	cbnz	r2, 8006334 <_malloc_r+0xdc>
 80062da:	f8c8 7000 	str.w	r7, [r8]
 80062de:	e00f      	b.n	8006300 <_malloc_r+0xa8>
 80062e0:	6822      	ldr	r2, [r4, #0]
 80062e2:	1b52      	subs	r2, r2, r5
 80062e4:	d420      	bmi.n	8006328 <_malloc_r+0xd0>
 80062e6:	2a0b      	cmp	r2, #11
 80062e8:	d917      	bls.n	800631a <_malloc_r+0xc2>
 80062ea:	1961      	adds	r1, r4, r5
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	6025      	str	r5, [r4, #0]
 80062f0:	bf18      	it	ne
 80062f2:	6059      	strne	r1, [r3, #4]
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	bf08      	it	eq
 80062f8:	f8c8 1000 	streq.w	r1, [r8]
 80062fc:	5162      	str	r2, [r4, r5]
 80062fe:	604b      	str	r3, [r1, #4]
 8006300:	4630      	mov	r0, r6
 8006302:	f000 f82f 	bl	8006364 <__malloc_unlock>
 8006306:	f104 000b 	add.w	r0, r4, #11
 800630a:	1d23      	adds	r3, r4, #4
 800630c:	f020 0007 	bic.w	r0, r0, #7
 8006310:	1ac2      	subs	r2, r0, r3
 8006312:	bf1c      	itt	ne
 8006314:	1a1b      	subne	r3, r3, r0
 8006316:	50a3      	strne	r3, [r4, r2]
 8006318:	e7af      	b.n	800627a <_malloc_r+0x22>
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	42a3      	cmp	r3, r4
 800631e:	bf0c      	ite	eq
 8006320:	f8c8 2000 	streq.w	r2, [r8]
 8006324:	605a      	strne	r2, [r3, #4]
 8006326:	e7eb      	b.n	8006300 <_malloc_r+0xa8>
 8006328:	4623      	mov	r3, r4
 800632a:	6864      	ldr	r4, [r4, #4]
 800632c:	e7ae      	b.n	800628c <_malloc_r+0x34>
 800632e:	463c      	mov	r4, r7
 8006330:	687f      	ldr	r7, [r7, #4]
 8006332:	e7b6      	b.n	80062a2 <_malloc_r+0x4a>
 8006334:	461a      	mov	r2, r3
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	42a3      	cmp	r3, r4
 800633a:	d1fb      	bne.n	8006334 <_malloc_r+0xdc>
 800633c:	2300      	movs	r3, #0
 800633e:	6053      	str	r3, [r2, #4]
 8006340:	e7de      	b.n	8006300 <_malloc_r+0xa8>
 8006342:	230c      	movs	r3, #12
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	4630      	mov	r0, r6
 8006348:	f000 f80c 	bl	8006364 <__malloc_unlock>
 800634c:	e794      	b.n	8006278 <_malloc_r+0x20>
 800634e:	6005      	str	r5, [r0, #0]
 8006350:	e7d6      	b.n	8006300 <_malloc_r+0xa8>
 8006352:	bf00      	nop
 8006354:	2000072c 	.word	0x2000072c

08006358 <__malloc_lock>:
 8006358:	4801      	ldr	r0, [pc, #4]	@ (8006360 <__malloc_lock+0x8>)
 800635a:	f7ff bf01 	b.w	8006160 <__retarget_lock_acquire_recursive>
 800635e:	bf00      	nop
 8006360:	20000724 	.word	0x20000724

08006364 <__malloc_unlock>:
 8006364:	4801      	ldr	r0, [pc, #4]	@ (800636c <__malloc_unlock+0x8>)
 8006366:	f7ff befc 	b.w	8006162 <__retarget_lock_release_recursive>
 800636a:	bf00      	nop
 800636c:	20000724 	.word	0x20000724

08006370 <__ssputs_r>:
 8006370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	688e      	ldr	r6, [r1, #8]
 8006376:	461f      	mov	r7, r3
 8006378:	42be      	cmp	r6, r7
 800637a:	680b      	ldr	r3, [r1, #0]
 800637c:	4682      	mov	sl, r0
 800637e:	460c      	mov	r4, r1
 8006380:	4690      	mov	r8, r2
 8006382:	d82d      	bhi.n	80063e0 <__ssputs_r+0x70>
 8006384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006388:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800638c:	d026      	beq.n	80063dc <__ssputs_r+0x6c>
 800638e:	6965      	ldr	r5, [r4, #20]
 8006390:	6909      	ldr	r1, [r1, #16]
 8006392:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006396:	eba3 0901 	sub.w	r9, r3, r1
 800639a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800639e:	1c7b      	adds	r3, r7, #1
 80063a0:	444b      	add	r3, r9
 80063a2:	106d      	asrs	r5, r5, #1
 80063a4:	429d      	cmp	r5, r3
 80063a6:	bf38      	it	cc
 80063a8:	461d      	movcc	r5, r3
 80063aa:	0553      	lsls	r3, r2, #21
 80063ac:	d527      	bpl.n	80063fe <__ssputs_r+0x8e>
 80063ae:	4629      	mov	r1, r5
 80063b0:	f7ff ff52 	bl	8006258 <_malloc_r>
 80063b4:	4606      	mov	r6, r0
 80063b6:	b360      	cbz	r0, 8006412 <__ssputs_r+0xa2>
 80063b8:	6921      	ldr	r1, [r4, #16]
 80063ba:	464a      	mov	r2, r9
 80063bc:	f7ff fed2 	bl	8006164 <memcpy>
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	6126      	str	r6, [r4, #16]
 80063ce:	6165      	str	r5, [r4, #20]
 80063d0:	444e      	add	r6, r9
 80063d2:	eba5 0509 	sub.w	r5, r5, r9
 80063d6:	6026      	str	r6, [r4, #0]
 80063d8:	60a5      	str	r5, [r4, #8]
 80063da:	463e      	mov	r6, r7
 80063dc:	42be      	cmp	r6, r7
 80063de:	d900      	bls.n	80063e2 <__ssputs_r+0x72>
 80063e0:	463e      	mov	r6, r7
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	4632      	mov	r2, r6
 80063e6:	4641      	mov	r1, r8
 80063e8:	f000 faa8 	bl	800693c <memmove>
 80063ec:	68a3      	ldr	r3, [r4, #8]
 80063ee:	1b9b      	subs	r3, r3, r6
 80063f0:	60a3      	str	r3, [r4, #8]
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	4433      	add	r3, r6
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	2000      	movs	r0, #0
 80063fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fe:	462a      	mov	r2, r5
 8006400:	f000 fac6 	bl	8006990 <_realloc_r>
 8006404:	4606      	mov	r6, r0
 8006406:	2800      	cmp	r0, #0
 8006408:	d1e0      	bne.n	80063cc <__ssputs_r+0x5c>
 800640a:	6921      	ldr	r1, [r4, #16]
 800640c:	4650      	mov	r0, sl
 800640e:	f7ff feb7 	bl	8006180 <_free_r>
 8006412:	230c      	movs	r3, #12
 8006414:	f8ca 3000 	str.w	r3, [sl]
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e7e9      	b.n	80063fa <__ssputs_r+0x8a>
	...

08006428 <_svfiprintf_r>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	4698      	mov	r8, r3
 800642e:	898b      	ldrh	r3, [r1, #12]
 8006430:	061b      	lsls	r3, r3, #24
 8006432:	b09d      	sub	sp, #116	@ 0x74
 8006434:	4607      	mov	r7, r0
 8006436:	460d      	mov	r5, r1
 8006438:	4614      	mov	r4, r2
 800643a:	d510      	bpl.n	800645e <_svfiprintf_r+0x36>
 800643c:	690b      	ldr	r3, [r1, #16]
 800643e:	b973      	cbnz	r3, 800645e <_svfiprintf_r+0x36>
 8006440:	2140      	movs	r1, #64	@ 0x40
 8006442:	f7ff ff09 	bl	8006258 <_malloc_r>
 8006446:	6028      	str	r0, [r5, #0]
 8006448:	6128      	str	r0, [r5, #16]
 800644a:	b930      	cbnz	r0, 800645a <_svfiprintf_r+0x32>
 800644c:	230c      	movs	r3, #12
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	b01d      	add	sp, #116	@ 0x74
 8006456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645a:	2340      	movs	r3, #64	@ 0x40
 800645c:	616b      	str	r3, [r5, #20]
 800645e:	2300      	movs	r3, #0
 8006460:	9309      	str	r3, [sp, #36]	@ 0x24
 8006462:	2320      	movs	r3, #32
 8006464:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006468:	f8cd 800c 	str.w	r8, [sp, #12]
 800646c:	2330      	movs	r3, #48	@ 0x30
 800646e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800660c <_svfiprintf_r+0x1e4>
 8006472:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006476:	f04f 0901 	mov.w	r9, #1
 800647a:	4623      	mov	r3, r4
 800647c:	469a      	mov	sl, r3
 800647e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006482:	b10a      	cbz	r2, 8006488 <_svfiprintf_r+0x60>
 8006484:	2a25      	cmp	r2, #37	@ 0x25
 8006486:	d1f9      	bne.n	800647c <_svfiprintf_r+0x54>
 8006488:	ebba 0b04 	subs.w	fp, sl, r4
 800648c:	d00b      	beq.n	80064a6 <_svfiprintf_r+0x7e>
 800648e:	465b      	mov	r3, fp
 8006490:	4622      	mov	r2, r4
 8006492:	4629      	mov	r1, r5
 8006494:	4638      	mov	r0, r7
 8006496:	f7ff ff6b 	bl	8006370 <__ssputs_r>
 800649a:	3001      	adds	r0, #1
 800649c:	f000 80a7 	beq.w	80065ee <_svfiprintf_r+0x1c6>
 80064a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064a2:	445a      	add	r2, fp
 80064a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80064a6:	f89a 3000 	ldrb.w	r3, [sl]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 809f 	beq.w	80065ee <_svfiprintf_r+0x1c6>
 80064b0:	2300      	movs	r3, #0
 80064b2:	f04f 32ff 	mov.w	r2, #4294967295
 80064b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ba:	f10a 0a01 	add.w	sl, sl, #1
 80064be:	9304      	str	r3, [sp, #16]
 80064c0:	9307      	str	r3, [sp, #28]
 80064c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80064c8:	4654      	mov	r4, sl
 80064ca:	2205      	movs	r2, #5
 80064cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d0:	484e      	ldr	r0, [pc, #312]	@ (800660c <_svfiprintf_r+0x1e4>)
 80064d2:	f7f9 fe85 	bl	80001e0 <memchr>
 80064d6:	9a04      	ldr	r2, [sp, #16]
 80064d8:	b9d8      	cbnz	r0, 8006512 <_svfiprintf_r+0xea>
 80064da:	06d0      	lsls	r0, r2, #27
 80064dc:	bf44      	itt	mi
 80064de:	2320      	movmi	r3, #32
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064e4:	0711      	lsls	r1, r2, #28
 80064e6:	bf44      	itt	mi
 80064e8:	232b      	movmi	r3, #43	@ 0x2b
 80064ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ee:	f89a 3000 	ldrb.w	r3, [sl]
 80064f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80064f4:	d015      	beq.n	8006522 <_svfiprintf_r+0xfa>
 80064f6:	9a07      	ldr	r2, [sp, #28]
 80064f8:	4654      	mov	r4, sl
 80064fa:	2000      	movs	r0, #0
 80064fc:	f04f 0c0a 	mov.w	ip, #10
 8006500:	4621      	mov	r1, r4
 8006502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006506:	3b30      	subs	r3, #48	@ 0x30
 8006508:	2b09      	cmp	r3, #9
 800650a:	d94b      	bls.n	80065a4 <_svfiprintf_r+0x17c>
 800650c:	b1b0      	cbz	r0, 800653c <_svfiprintf_r+0x114>
 800650e:	9207      	str	r2, [sp, #28]
 8006510:	e014      	b.n	800653c <_svfiprintf_r+0x114>
 8006512:	eba0 0308 	sub.w	r3, r0, r8
 8006516:	fa09 f303 	lsl.w	r3, r9, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	46a2      	mov	sl, r4
 8006520:	e7d2      	b.n	80064c8 <_svfiprintf_r+0xa0>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	1d19      	adds	r1, r3, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	9103      	str	r1, [sp, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	bfbb      	ittet	lt
 800652e:	425b      	neglt	r3, r3
 8006530:	f042 0202 	orrlt.w	r2, r2, #2
 8006534:	9307      	strge	r3, [sp, #28]
 8006536:	9307      	strlt	r3, [sp, #28]
 8006538:	bfb8      	it	lt
 800653a:	9204      	strlt	r2, [sp, #16]
 800653c:	7823      	ldrb	r3, [r4, #0]
 800653e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006540:	d10a      	bne.n	8006558 <_svfiprintf_r+0x130>
 8006542:	7863      	ldrb	r3, [r4, #1]
 8006544:	2b2a      	cmp	r3, #42	@ 0x2a
 8006546:	d132      	bne.n	80065ae <_svfiprintf_r+0x186>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	1d1a      	adds	r2, r3, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	9203      	str	r2, [sp, #12]
 8006550:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006554:	3402      	adds	r4, #2
 8006556:	9305      	str	r3, [sp, #20]
 8006558:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800661c <_svfiprintf_r+0x1f4>
 800655c:	7821      	ldrb	r1, [r4, #0]
 800655e:	2203      	movs	r2, #3
 8006560:	4650      	mov	r0, sl
 8006562:	f7f9 fe3d 	bl	80001e0 <memchr>
 8006566:	b138      	cbz	r0, 8006578 <_svfiprintf_r+0x150>
 8006568:	9b04      	ldr	r3, [sp, #16]
 800656a:	eba0 000a 	sub.w	r0, r0, sl
 800656e:	2240      	movs	r2, #64	@ 0x40
 8006570:	4082      	lsls	r2, r0
 8006572:	4313      	orrs	r3, r2
 8006574:	3401      	adds	r4, #1
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657c:	4824      	ldr	r0, [pc, #144]	@ (8006610 <_svfiprintf_r+0x1e8>)
 800657e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006582:	2206      	movs	r2, #6
 8006584:	f7f9 fe2c 	bl	80001e0 <memchr>
 8006588:	2800      	cmp	r0, #0
 800658a:	d036      	beq.n	80065fa <_svfiprintf_r+0x1d2>
 800658c:	4b21      	ldr	r3, [pc, #132]	@ (8006614 <_svfiprintf_r+0x1ec>)
 800658e:	bb1b      	cbnz	r3, 80065d8 <_svfiprintf_r+0x1b0>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	3307      	adds	r3, #7
 8006594:	f023 0307 	bic.w	r3, r3, #7
 8006598:	3308      	adds	r3, #8
 800659a:	9303      	str	r3, [sp, #12]
 800659c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659e:	4433      	add	r3, r6
 80065a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a2:	e76a      	b.n	800647a <_svfiprintf_r+0x52>
 80065a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a8:	460c      	mov	r4, r1
 80065aa:	2001      	movs	r0, #1
 80065ac:	e7a8      	b.n	8006500 <_svfiprintf_r+0xd8>
 80065ae:	2300      	movs	r3, #0
 80065b0:	3401      	adds	r4, #1
 80065b2:	9305      	str	r3, [sp, #20]
 80065b4:	4619      	mov	r1, r3
 80065b6:	f04f 0c0a 	mov.w	ip, #10
 80065ba:	4620      	mov	r0, r4
 80065bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c0:	3a30      	subs	r2, #48	@ 0x30
 80065c2:	2a09      	cmp	r2, #9
 80065c4:	d903      	bls.n	80065ce <_svfiprintf_r+0x1a6>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0c6      	beq.n	8006558 <_svfiprintf_r+0x130>
 80065ca:	9105      	str	r1, [sp, #20]
 80065cc:	e7c4      	b.n	8006558 <_svfiprintf_r+0x130>
 80065ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d2:	4604      	mov	r4, r0
 80065d4:	2301      	movs	r3, #1
 80065d6:	e7f0      	b.n	80065ba <_svfiprintf_r+0x192>
 80065d8:	ab03      	add	r3, sp, #12
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	462a      	mov	r2, r5
 80065de:	4b0e      	ldr	r3, [pc, #56]	@ (8006618 <_svfiprintf_r+0x1f0>)
 80065e0:	a904      	add	r1, sp, #16
 80065e2:	4638      	mov	r0, r7
 80065e4:	f3af 8000 	nop.w
 80065e8:	1c42      	adds	r2, r0, #1
 80065ea:	4606      	mov	r6, r0
 80065ec:	d1d6      	bne.n	800659c <_svfiprintf_r+0x174>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	065b      	lsls	r3, r3, #25
 80065f2:	f53f af2d 	bmi.w	8006450 <_svfiprintf_r+0x28>
 80065f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065f8:	e72c      	b.n	8006454 <_svfiprintf_r+0x2c>
 80065fa:	ab03      	add	r3, sp, #12
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	462a      	mov	r2, r5
 8006600:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <_svfiprintf_r+0x1f0>)
 8006602:	a904      	add	r1, sp, #16
 8006604:	4638      	mov	r0, r7
 8006606:	f000 f879 	bl	80066fc <_printf_i>
 800660a:	e7ed      	b.n	80065e8 <_svfiprintf_r+0x1c0>
 800660c:	080077b4 	.word	0x080077b4
 8006610:	080077be 	.word	0x080077be
 8006614:	00000000 	.word	0x00000000
 8006618:	08006371 	.word	0x08006371
 800661c:	080077ba 	.word	0x080077ba

08006620 <_printf_common>:
 8006620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006624:	4616      	mov	r6, r2
 8006626:	4698      	mov	r8, r3
 8006628:	688a      	ldr	r2, [r1, #8]
 800662a:	690b      	ldr	r3, [r1, #16]
 800662c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006630:	4293      	cmp	r3, r2
 8006632:	bfb8      	it	lt
 8006634:	4613      	movlt	r3, r2
 8006636:	6033      	str	r3, [r6, #0]
 8006638:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800663c:	4607      	mov	r7, r0
 800663e:	460c      	mov	r4, r1
 8006640:	b10a      	cbz	r2, 8006646 <_printf_common+0x26>
 8006642:	3301      	adds	r3, #1
 8006644:	6033      	str	r3, [r6, #0]
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	0699      	lsls	r1, r3, #26
 800664a:	bf42      	ittt	mi
 800664c:	6833      	ldrmi	r3, [r6, #0]
 800664e:	3302      	addmi	r3, #2
 8006650:	6033      	strmi	r3, [r6, #0]
 8006652:	6825      	ldr	r5, [r4, #0]
 8006654:	f015 0506 	ands.w	r5, r5, #6
 8006658:	d106      	bne.n	8006668 <_printf_common+0x48>
 800665a:	f104 0a19 	add.w	sl, r4, #25
 800665e:	68e3      	ldr	r3, [r4, #12]
 8006660:	6832      	ldr	r2, [r6, #0]
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	42ab      	cmp	r3, r5
 8006666:	dc26      	bgt.n	80066b6 <_printf_common+0x96>
 8006668:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	3b00      	subs	r3, #0
 8006670:	bf18      	it	ne
 8006672:	2301      	movne	r3, #1
 8006674:	0692      	lsls	r2, r2, #26
 8006676:	d42b      	bmi.n	80066d0 <_printf_common+0xb0>
 8006678:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800667c:	4641      	mov	r1, r8
 800667e:	4638      	mov	r0, r7
 8006680:	47c8      	blx	r9
 8006682:	3001      	adds	r0, #1
 8006684:	d01e      	beq.n	80066c4 <_printf_common+0xa4>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	6922      	ldr	r2, [r4, #16]
 800668a:	f003 0306 	and.w	r3, r3, #6
 800668e:	2b04      	cmp	r3, #4
 8006690:	bf02      	ittt	eq
 8006692:	68e5      	ldreq	r5, [r4, #12]
 8006694:	6833      	ldreq	r3, [r6, #0]
 8006696:	1aed      	subeq	r5, r5, r3
 8006698:	68a3      	ldr	r3, [r4, #8]
 800669a:	bf0c      	ite	eq
 800669c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066a0:	2500      	movne	r5, #0
 80066a2:	4293      	cmp	r3, r2
 80066a4:	bfc4      	itt	gt
 80066a6:	1a9b      	subgt	r3, r3, r2
 80066a8:	18ed      	addgt	r5, r5, r3
 80066aa:	2600      	movs	r6, #0
 80066ac:	341a      	adds	r4, #26
 80066ae:	42b5      	cmp	r5, r6
 80066b0:	d11a      	bne.n	80066e8 <_printf_common+0xc8>
 80066b2:	2000      	movs	r0, #0
 80066b4:	e008      	b.n	80066c8 <_printf_common+0xa8>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4652      	mov	r2, sl
 80066ba:	4641      	mov	r1, r8
 80066bc:	4638      	mov	r0, r7
 80066be:	47c8      	blx	r9
 80066c0:	3001      	adds	r0, #1
 80066c2:	d103      	bne.n	80066cc <_printf_common+0xac>
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066cc:	3501      	adds	r5, #1
 80066ce:	e7c6      	b.n	800665e <_printf_common+0x3e>
 80066d0:	18e1      	adds	r1, r4, r3
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	2030      	movs	r0, #48	@ 0x30
 80066d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066da:	4422      	add	r2, r4
 80066dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066e4:	3302      	adds	r3, #2
 80066e6:	e7c7      	b.n	8006678 <_printf_common+0x58>
 80066e8:	2301      	movs	r3, #1
 80066ea:	4622      	mov	r2, r4
 80066ec:	4641      	mov	r1, r8
 80066ee:	4638      	mov	r0, r7
 80066f0:	47c8      	blx	r9
 80066f2:	3001      	adds	r0, #1
 80066f4:	d0e6      	beq.n	80066c4 <_printf_common+0xa4>
 80066f6:	3601      	adds	r6, #1
 80066f8:	e7d9      	b.n	80066ae <_printf_common+0x8e>
	...

080066fc <_printf_i>:
 80066fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	7e0f      	ldrb	r7, [r1, #24]
 8006702:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006704:	2f78      	cmp	r7, #120	@ 0x78
 8006706:	4691      	mov	r9, r2
 8006708:	4680      	mov	r8, r0
 800670a:	460c      	mov	r4, r1
 800670c:	469a      	mov	sl, r3
 800670e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006712:	d807      	bhi.n	8006724 <_printf_i+0x28>
 8006714:	2f62      	cmp	r7, #98	@ 0x62
 8006716:	d80a      	bhi.n	800672e <_printf_i+0x32>
 8006718:	2f00      	cmp	r7, #0
 800671a:	f000 80d2 	beq.w	80068c2 <_printf_i+0x1c6>
 800671e:	2f58      	cmp	r7, #88	@ 0x58
 8006720:	f000 80b9 	beq.w	8006896 <_printf_i+0x19a>
 8006724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006728:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800672c:	e03a      	b.n	80067a4 <_printf_i+0xa8>
 800672e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006732:	2b15      	cmp	r3, #21
 8006734:	d8f6      	bhi.n	8006724 <_printf_i+0x28>
 8006736:	a101      	add	r1, pc, #4	@ (adr r1, 800673c <_printf_i+0x40>)
 8006738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800673c:	08006795 	.word	0x08006795
 8006740:	080067a9 	.word	0x080067a9
 8006744:	08006725 	.word	0x08006725
 8006748:	08006725 	.word	0x08006725
 800674c:	08006725 	.word	0x08006725
 8006750:	08006725 	.word	0x08006725
 8006754:	080067a9 	.word	0x080067a9
 8006758:	08006725 	.word	0x08006725
 800675c:	08006725 	.word	0x08006725
 8006760:	08006725 	.word	0x08006725
 8006764:	08006725 	.word	0x08006725
 8006768:	080068a9 	.word	0x080068a9
 800676c:	080067d3 	.word	0x080067d3
 8006770:	08006863 	.word	0x08006863
 8006774:	08006725 	.word	0x08006725
 8006778:	08006725 	.word	0x08006725
 800677c:	080068cb 	.word	0x080068cb
 8006780:	08006725 	.word	0x08006725
 8006784:	080067d3 	.word	0x080067d3
 8006788:	08006725 	.word	0x08006725
 800678c:	08006725 	.word	0x08006725
 8006790:	0800686b 	.word	0x0800686b
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	1d1a      	adds	r2, r3, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6032      	str	r2, [r6, #0]
 800679c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067a4:	2301      	movs	r3, #1
 80067a6:	e09d      	b.n	80068e4 <_printf_i+0x1e8>
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	1d19      	adds	r1, r3, #4
 80067ae:	6031      	str	r1, [r6, #0]
 80067b0:	0606      	lsls	r6, r0, #24
 80067b2:	d501      	bpl.n	80067b8 <_printf_i+0xbc>
 80067b4:	681d      	ldr	r5, [r3, #0]
 80067b6:	e003      	b.n	80067c0 <_printf_i+0xc4>
 80067b8:	0645      	lsls	r5, r0, #25
 80067ba:	d5fb      	bpl.n	80067b4 <_printf_i+0xb8>
 80067bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	da03      	bge.n	80067cc <_printf_i+0xd0>
 80067c4:	232d      	movs	r3, #45	@ 0x2d
 80067c6:	426d      	negs	r5, r5
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067cc:	4859      	ldr	r0, [pc, #356]	@ (8006934 <_printf_i+0x238>)
 80067ce:	230a      	movs	r3, #10
 80067d0:	e011      	b.n	80067f6 <_printf_i+0xfa>
 80067d2:	6821      	ldr	r1, [r4, #0]
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	0608      	lsls	r0, r1, #24
 80067d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80067dc:	d402      	bmi.n	80067e4 <_printf_i+0xe8>
 80067de:	0649      	lsls	r1, r1, #25
 80067e0:	bf48      	it	mi
 80067e2:	b2ad      	uxthmi	r5, r5
 80067e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80067e6:	4853      	ldr	r0, [pc, #332]	@ (8006934 <_printf_i+0x238>)
 80067e8:	6033      	str	r3, [r6, #0]
 80067ea:	bf14      	ite	ne
 80067ec:	230a      	movne	r3, #10
 80067ee:	2308      	moveq	r3, #8
 80067f0:	2100      	movs	r1, #0
 80067f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067f6:	6866      	ldr	r6, [r4, #4]
 80067f8:	60a6      	str	r6, [r4, #8]
 80067fa:	2e00      	cmp	r6, #0
 80067fc:	bfa2      	ittt	ge
 80067fe:	6821      	ldrge	r1, [r4, #0]
 8006800:	f021 0104 	bicge.w	r1, r1, #4
 8006804:	6021      	strge	r1, [r4, #0]
 8006806:	b90d      	cbnz	r5, 800680c <_printf_i+0x110>
 8006808:	2e00      	cmp	r6, #0
 800680a:	d04b      	beq.n	80068a4 <_printf_i+0x1a8>
 800680c:	4616      	mov	r6, r2
 800680e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006812:	fb03 5711 	mls	r7, r3, r1, r5
 8006816:	5dc7      	ldrb	r7, [r0, r7]
 8006818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800681c:	462f      	mov	r7, r5
 800681e:	42bb      	cmp	r3, r7
 8006820:	460d      	mov	r5, r1
 8006822:	d9f4      	bls.n	800680e <_printf_i+0x112>
 8006824:	2b08      	cmp	r3, #8
 8006826:	d10b      	bne.n	8006840 <_printf_i+0x144>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	07df      	lsls	r7, r3, #31
 800682c:	d508      	bpl.n	8006840 <_printf_i+0x144>
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	6861      	ldr	r1, [r4, #4]
 8006832:	4299      	cmp	r1, r3
 8006834:	bfde      	ittt	le
 8006836:	2330      	movle	r3, #48	@ 0x30
 8006838:	f806 3c01 	strble.w	r3, [r6, #-1]
 800683c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006840:	1b92      	subs	r2, r2, r6
 8006842:	6122      	str	r2, [r4, #16]
 8006844:	f8cd a000 	str.w	sl, [sp]
 8006848:	464b      	mov	r3, r9
 800684a:	aa03      	add	r2, sp, #12
 800684c:	4621      	mov	r1, r4
 800684e:	4640      	mov	r0, r8
 8006850:	f7ff fee6 	bl	8006620 <_printf_common>
 8006854:	3001      	adds	r0, #1
 8006856:	d14a      	bne.n	80068ee <_printf_i+0x1f2>
 8006858:	f04f 30ff 	mov.w	r0, #4294967295
 800685c:	b004      	add	sp, #16
 800685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	f043 0320 	orr.w	r3, r3, #32
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	4833      	ldr	r0, [pc, #204]	@ (8006938 <_printf_i+0x23c>)
 800686c:	2778      	movs	r7, #120	@ 0x78
 800686e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	6831      	ldr	r1, [r6, #0]
 8006876:	061f      	lsls	r7, r3, #24
 8006878:	f851 5b04 	ldr.w	r5, [r1], #4
 800687c:	d402      	bmi.n	8006884 <_printf_i+0x188>
 800687e:	065f      	lsls	r7, r3, #25
 8006880:	bf48      	it	mi
 8006882:	b2ad      	uxthmi	r5, r5
 8006884:	6031      	str	r1, [r6, #0]
 8006886:	07d9      	lsls	r1, r3, #31
 8006888:	bf44      	itt	mi
 800688a:	f043 0320 	orrmi.w	r3, r3, #32
 800688e:	6023      	strmi	r3, [r4, #0]
 8006890:	b11d      	cbz	r5, 800689a <_printf_i+0x19e>
 8006892:	2310      	movs	r3, #16
 8006894:	e7ac      	b.n	80067f0 <_printf_i+0xf4>
 8006896:	4827      	ldr	r0, [pc, #156]	@ (8006934 <_printf_i+0x238>)
 8006898:	e7e9      	b.n	800686e <_printf_i+0x172>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	f023 0320 	bic.w	r3, r3, #32
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	e7f6      	b.n	8006892 <_printf_i+0x196>
 80068a4:	4616      	mov	r6, r2
 80068a6:	e7bd      	b.n	8006824 <_printf_i+0x128>
 80068a8:	6833      	ldr	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	6961      	ldr	r1, [r4, #20]
 80068ae:	1d18      	adds	r0, r3, #4
 80068b0:	6030      	str	r0, [r6, #0]
 80068b2:	062e      	lsls	r6, r5, #24
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	d501      	bpl.n	80068bc <_printf_i+0x1c0>
 80068b8:	6019      	str	r1, [r3, #0]
 80068ba:	e002      	b.n	80068c2 <_printf_i+0x1c6>
 80068bc:	0668      	lsls	r0, r5, #25
 80068be:	d5fb      	bpl.n	80068b8 <_printf_i+0x1bc>
 80068c0:	8019      	strh	r1, [r3, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	6123      	str	r3, [r4, #16]
 80068c6:	4616      	mov	r6, r2
 80068c8:	e7bc      	b.n	8006844 <_printf_i+0x148>
 80068ca:	6833      	ldr	r3, [r6, #0]
 80068cc:	1d1a      	adds	r2, r3, #4
 80068ce:	6032      	str	r2, [r6, #0]
 80068d0:	681e      	ldr	r6, [r3, #0]
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	2100      	movs	r1, #0
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7f9 fc82 	bl	80001e0 <memchr>
 80068dc:	b108      	cbz	r0, 80068e2 <_printf_i+0x1e6>
 80068de:	1b80      	subs	r0, r0, r6
 80068e0:	6060      	str	r0, [r4, #4]
 80068e2:	6863      	ldr	r3, [r4, #4]
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	2300      	movs	r3, #0
 80068e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ec:	e7aa      	b.n	8006844 <_printf_i+0x148>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	4632      	mov	r2, r6
 80068f2:	4649      	mov	r1, r9
 80068f4:	4640      	mov	r0, r8
 80068f6:	47d0      	blx	sl
 80068f8:	3001      	adds	r0, #1
 80068fa:	d0ad      	beq.n	8006858 <_printf_i+0x15c>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	079b      	lsls	r3, r3, #30
 8006900:	d413      	bmi.n	800692a <_printf_i+0x22e>
 8006902:	68e0      	ldr	r0, [r4, #12]
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	4298      	cmp	r0, r3
 8006908:	bfb8      	it	lt
 800690a:	4618      	movlt	r0, r3
 800690c:	e7a6      	b.n	800685c <_printf_i+0x160>
 800690e:	2301      	movs	r3, #1
 8006910:	4632      	mov	r2, r6
 8006912:	4649      	mov	r1, r9
 8006914:	4640      	mov	r0, r8
 8006916:	47d0      	blx	sl
 8006918:	3001      	adds	r0, #1
 800691a:	d09d      	beq.n	8006858 <_printf_i+0x15c>
 800691c:	3501      	adds	r5, #1
 800691e:	68e3      	ldr	r3, [r4, #12]
 8006920:	9903      	ldr	r1, [sp, #12]
 8006922:	1a5b      	subs	r3, r3, r1
 8006924:	42ab      	cmp	r3, r5
 8006926:	dcf2      	bgt.n	800690e <_printf_i+0x212>
 8006928:	e7eb      	b.n	8006902 <_printf_i+0x206>
 800692a:	2500      	movs	r5, #0
 800692c:	f104 0619 	add.w	r6, r4, #25
 8006930:	e7f5      	b.n	800691e <_printf_i+0x222>
 8006932:	bf00      	nop
 8006934:	080077c5 	.word	0x080077c5
 8006938:	080077d6 	.word	0x080077d6

0800693c <memmove>:
 800693c:	4288      	cmp	r0, r1
 800693e:	b510      	push	{r4, lr}
 8006940:	eb01 0402 	add.w	r4, r1, r2
 8006944:	d902      	bls.n	800694c <memmove+0x10>
 8006946:	4284      	cmp	r4, r0
 8006948:	4623      	mov	r3, r4
 800694a:	d807      	bhi.n	800695c <memmove+0x20>
 800694c:	1e43      	subs	r3, r0, #1
 800694e:	42a1      	cmp	r1, r4
 8006950:	d008      	beq.n	8006964 <memmove+0x28>
 8006952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800695a:	e7f8      	b.n	800694e <memmove+0x12>
 800695c:	4402      	add	r2, r0
 800695e:	4601      	mov	r1, r0
 8006960:	428a      	cmp	r2, r1
 8006962:	d100      	bne.n	8006966 <memmove+0x2a>
 8006964:	bd10      	pop	{r4, pc}
 8006966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800696a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800696e:	e7f7      	b.n	8006960 <memmove+0x24>

08006970 <_sbrk_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d06      	ldr	r5, [pc, #24]	@ (800698c <_sbrk_r+0x1c>)
 8006974:	2300      	movs	r3, #0
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	f7fa fb94 	bl	80010a8 <_sbrk>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_sbrk_r+0x1a>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b103      	cbz	r3, 800698a <_sbrk_r+0x1a>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	20000720 	.word	0x20000720

08006990 <_realloc_r>:
 8006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	4680      	mov	r8, r0
 8006996:	4615      	mov	r5, r2
 8006998:	460c      	mov	r4, r1
 800699a:	b921      	cbnz	r1, 80069a6 <_realloc_r+0x16>
 800699c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a0:	4611      	mov	r1, r2
 80069a2:	f7ff bc59 	b.w	8006258 <_malloc_r>
 80069a6:	b92a      	cbnz	r2, 80069b4 <_realloc_r+0x24>
 80069a8:	f7ff fbea 	bl	8006180 <_free_r>
 80069ac:	2400      	movs	r4, #0
 80069ae:	4620      	mov	r0, r4
 80069b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b4:	f000 f81a 	bl	80069ec <_malloc_usable_size_r>
 80069b8:	4285      	cmp	r5, r0
 80069ba:	4606      	mov	r6, r0
 80069bc:	d802      	bhi.n	80069c4 <_realloc_r+0x34>
 80069be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80069c2:	d8f4      	bhi.n	80069ae <_realloc_r+0x1e>
 80069c4:	4629      	mov	r1, r5
 80069c6:	4640      	mov	r0, r8
 80069c8:	f7ff fc46 	bl	8006258 <_malloc_r>
 80069cc:	4607      	mov	r7, r0
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d0ec      	beq.n	80069ac <_realloc_r+0x1c>
 80069d2:	42b5      	cmp	r5, r6
 80069d4:	462a      	mov	r2, r5
 80069d6:	4621      	mov	r1, r4
 80069d8:	bf28      	it	cs
 80069da:	4632      	movcs	r2, r6
 80069dc:	f7ff fbc2 	bl	8006164 <memcpy>
 80069e0:	4621      	mov	r1, r4
 80069e2:	4640      	mov	r0, r8
 80069e4:	f7ff fbcc 	bl	8006180 <_free_r>
 80069e8:	463c      	mov	r4, r7
 80069ea:	e7e0      	b.n	80069ae <_realloc_r+0x1e>

080069ec <_malloc_usable_size_r>:
 80069ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f0:	1f18      	subs	r0, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bfbc      	itt	lt
 80069f6:	580b      	ldrlt	r3, [r1, r0]
 80069f8:	18c0      	addlt	r0, r0, r3
 80069fa:	4770      	bx	lr

080069fc <_init>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr

08006a08 <_fini>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr
